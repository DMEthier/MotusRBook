[
["index.html", "R for Motus A walk through the use of R for Motus automated radio-telemetry data", " R for Motus Tara L. Crewe and Zoe Crysler 2017-10-10 A walk through the use of R for Motus automated radio-telemetry data Our goal with this online ‘handbook’ is to show Motus (https://motus.org) users how to use the Motus R package (https://github.com/jbrzusto/motus), along with other stand-alone R packages (e.g., ggplot2), to import tag detection data for their project or receiver; explore their data through visualizations and summaries; transform their data, e.g., by determining time since sunrise/sunset or magnetic declination; and to run various analytical procedures. This book therefore goes beyond simply highlighting the functionalities of the Motus R package - it also shows users, who may not be experts in R, to use additional R packages to do basic summaries and plots. We hope the contents will be of use, and if you have suggestions for additional examples, please let us know by emailing motus@birdscanada.org. "],
["introduction.html", "1 Introduction 1.1 What this book does not cover 1.2 Prerequisites 1.3 How this book is organized 1.4 Sample dataset 1.5 Acknowledgements", " 1 Introduction The Motus Wildlife Tracking System (‘Motus’; Taylor et al. 2017; https://www.motus.org) is an international, collaborative automated radio-telemetry network that is used to track the movement and behaviour of primarily small flying organisms affixed with digitally encoded radio-transmitters. Motus has its roots in the SensorGnome network piloted in 2012-2013. In 2014, a major infrastructure expansion was made possible through a Canada Foundation for Innovation grant to Western University, The University of Guelph, and Acadia University. Since then, Motus has continued to grow through the collaboration of independent researchers and organizations https://motus.org/about/, and is now managed as a program of Bird Studies Canada (https://www.birdscanada.org) in partnership with Acadia University. Motus is unique among automated telemetry arrays in that all researchers in a geographic region (e.g., the Americas or Europe) use a shared radio frequency. This allows tagged animals to be detected by any receiving station across the network, greatly broadening the spatial scope of potential research questions. Motus users also use a shared data infrastructure and web portal: all data collected from across the network are centrally stored and archived, which allows users to access detections of their tags by anyone’s receiver in the network, and individuals that maintain receivers have access to all detections of anyone’s tags on those receivers. Having a shared data infrastructure also means that users can benefit from R functions written specifically for Motus data by any and all users. A Motus R package is in continual development, and the intent of this online ‘handbook’ is to help users learn how the various functionalities of the package, and additional R packages like ggplot, can be used to retrieve tag detections, explore, visualize, transform, and analyze Motus data. The content of the handbook will continue to evolve and grow along with the analytical needs of the network. Those interested in contributing code to the Motus R package or this handbook can send proposed additions to Tara Crewe (tcrewe@birdscanada.org) or Zoe Crysler (zcrysler@birdscanada.org) (??). Taylor, P. D., T. L. Crewe, S. A. Mackenzie, D. Lepage, Y. Aubry, Z. Crysler, G. Finney, C. M. Francis, C. G. Guglielmo, D. J. Hamilton, R. L. Holberton, P. H. Loring, G. W. Mitchell, D. R. Noriis, J. Paquet, R. A. Ronconi, J. Smetzer, P. A. Smith, L. J. Welch, and B. K. Woodworth. 2017. The Motus Wildlife Tracking System: a collaborative research network to enhance the understanding of wildlife movement. Avian Conservation and Ecology 12(1):8. https://doi.org/10.5751/ACE-00953-120108. 1.1 What this book does not cover This book does not currently cover how to register radio tags with Motus, manage tags and station deployments, upload data, and so on. Information to guide you through those tasks can be found under the ‘resources’ tab on the Motus website at https://motus.org/resources/. Please remember to register your tags and enter tag and station metadata with Motus prior to deploying your tags. Please also see https://motus.org/policy/ to review our collaboration policy and tag registration and fee schedule. 1.2 Prerequisites This book assumes that you have a basic understanding of R. If you are new to R, we highly recommend ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham (http://r4ds.had.co.nz/), which covers how to import, visualize, and summarize data in R using the Tidyverse collection of R packages https://www.tidyverse.org/. It also provides useful tips for organizing your workflow to create clean, reproducible code (http://r4ds.had.co.nz/workflow-projects.html). We follow their lead by using Tidyverse throughout this book, and where possible within the package functions. 1.3 How this book is organized Each section of this book will begin with a paragraph or figure describing the broader intention or outcome of the section, followed by details on how to get there using R. For example, the section on accessing and downloading tag detection data begins with a screenshot of the structure of a dataframe, followed by the R code required to access the data. 1.4 Sample dataset Throughout this book we use a subset of data from the James Bay Shorebird Project to illustrate how to access, manage, and analyze Motus data in R. The James Bay Shorebird Project conducts monitoring and research on shorebirds staging along the James Bay coast, and is a collaborating effort among the Ontario Ministry of Natural Resources and Forestry, Bird Studies Canada, Trent University, and Environment and Climate Change Canada’s Canadian Wildlife Service, in conjunction with a larger conservation initiative involving James Bay first nations and Nature Canada. The Royal Ontario Museum was a contributing partner until 2016. The goals of the project are to 1) improve our ability to estimate indices of abundance and population trends for shorebird species staging along the western James Bay coast, 2) understand movement patterns and their causes, and 3) identify the relative importance of shorebird staging sites and their habitats. Collectively, this information will aid in the development of conservation measures for Red Knot and other shorebird species through habitat protection like Western Hemisphere Shorebird Reserve Network (WHSRN) designation. More information can be viewed on the James Bay Shorebird Project website at https://www.jamesbayshorebirdproject.com/, on Facebook https://www.facebook.com/jamesbayshorebirdproject/, or by contacting their project lead: Christian Friis Wildlife Biologist Canadian Wildlife Service Environment and Climate Change Canada / Government of Canada christian.friis@canada.ca / Tel: 416.739.4908 biologiste de la faune Service canadien de la faune Environnement et Changement Climatique Canada / Gouvernement du Canada christian.friis@canada.ca / Tél. : 416.739.4908 1.5 Acknowledgements Some of the text included in this book was adapted from John Brzustowski’s github repository for the Motus R package at: https://github.com/jbrzusto/motus. Motus was conceived as the SensorGnome network by Philip Taylor and John Brzustowski at Acadia University. Initial expansion of the network was supported by a Canada Foundation for Innovation Grant to Western University (Christopher Guglielmo), The University of Guelph (D. Ryan Norris), and Acadia University (Philip Taylor). The development of the Motus web interface, R package, and accompanying handbook were made possible through a Canarie grant to Bird Studies Canada (https://www.canarie.ca/). Motus continues to grow as a program of Bird Studies Canada, through the collaboration of numerous independent researchers, organizations, and individuals. A non-exhaustive list of Motus partners and collaborators can be found at https://motus.org/data/partners.jsp. If your organization is not listed, please contact motus@birdscanada.org. Many people have worked together to bring Motus technology, the web interface, and R-package together. The core ‘Motus Team’ includes John Brzustowski, Zoe Crysler, Tara Crewe, Jeremy Hussell, Catherine Jardine, Denis Lepage, Stuart Mackenzie, Paul Morrill, and Philip Taylor. "],
["loading-the-motus-r-package.html", "2 Loading the Motus R Package 2.1 User Authentication 2.2 Internal data processing", " 2 Loading the Motus R Package Motus users can install the latest stable version of the Motus R package using the following code. You only need to install the packages once, but once installed, you do need to load each package (using library() or require()) each time you open a new R session. Please note that some functionalities of the devtools package may require updated versions of R and RStudio. To avoid errors, please ensure you are using the most recent releases of R (https://www.r-project.org/) and RStudio (https://www.rstudio.com/products/RStudio/), and update your R packages using update.pacakges() in the R console. update.packages() ## to update your existing R packages install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this library(devtools) ## load devtools install_github(&quot;jbrzusto/motus@master&quot;) ## the last stable version library(motus) For developers, the ‘staging’ branch is for work-in-progress. Install it with: install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this library(devtools) install_github(&quot;jbrzusto/motus@staging&quot;) ## the development version library(motus) Throughout the book, we use Tidyverse https://www.tidyverse.org/, which is a collection of R packages, including tidyr() and dplyr(). These can be installed with: install.packages(&quot;tidyverse&quot;) ## again, you only need to install once. library(tidyverse) More information on Tidyverse can be found at https://www.tidyverse.org/, or by browsing ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham: http://r4ds.had.co.nz/. 2.1 User Authentication The first time you call a function using the Motus R package, you will be asked for your motus.org username and password to authenticate your access to project data. This will only happen once per R session. If you do not have a Motus user name and password, you can sign up at https://motus.org/data/user/new. Permission to access project data will then be granted by Motus staff or the project principal investigator. 2.2 Internal data processing As an animal moves within the detection range of a Motus station, radio transmissions, or ‘bursts’, are detected by antenna(s) and recorded by a receiver. These raw detection data are either uploaded to the Motus database instantaneously via internet connection, or downloaded from the receiver and uploaded to Motus manually. Behind the scenes, various functions read and process the raw detections data to produce the tag detections file that users access using the R package (see ‘Data Import’ below). While most users will not need to call on the internal data processing functions, a complete list of functions within the Motus server R package can be found on GitHub: https://github.com/jbrzusto/motusServer. The code behind each function can be viewed on GitHub, or by typing the following in the R console after loading the R package, replacing ‘function.name’ with the name of the R function of interest: function.name() "],
["accessing-and-understanding-detections-data.html", "3 Accessing and understanding detections data 3.1 Database types 3.2 Importing tag detections 3.3 Data structure", " 3 Accessing and understanding detections data It is important to note that the success of the Motus network is dependent on the timely upload of detection data from receivers, and on the maintenance of accurate and up to date tag and receiver metadata by collaborators. Users are encouraged to check for updated detection data and metadata each time they run an analysis, because collaborators can add detection data and metadata at any time, and these could influence the completeness of your own detections data. 3.1 Database types knitr::include_graphics(&quot;images/DataStructure.png&quot;) There are two types of tag databases: receiver database: includes all detections of any registered tags from a single receiver. A receiver database has a name like SG-1234BBBK5678.motus; where the name is the serial number of the receiver. project database: includes all detections of your registered tags from across the motus network. A tag project database has a name like project-123.motus, where the number is the motus project ID. These two databases correspond to the basic model of data sharing: you get all detections of anyone’s tags by your receivers (i.e., one receiver tag database for each receiver you deploy) you get all detections of your tags by anyone’s receivers (i.e., one project tag database for each of your motus projects) 3.2 Importing tag detections Your project’s .motus file is available for download at https://motus.org/data/downloads under your project profile. Once downloaded, make sure that you have the appropriate packages installed and loaded in R as outlined in Chapter 2-LoadingPackage. Once packages are loaded, you can import your tag detections into R using the following code: file.name &lt;- &quot;C:/data/project-123.motus&quot; ## replace with the full location of your project data t &lt;- dplyr::src_sqlite(file.name) 3.3 Data structure Your tag database is stored as an SQLite (‘dplyr::src_sqlite’) file with the extension ‘.motus’. The sqlite format was chosen because: it is flexible, allowing for many data formats. it is accessible from many software platforms (not just R). it is appendable: the database can be created and updated on disk without having to read in and resave the entire contents. This will save time and computer memory when searching to see if any new detections are available for your project or receiver. The .motus file contains a series of interelated tables where data are stored in a condensed format to save memory. The following tables are included in the .motus file; a complete list of parameters stored in each table can be found in Appendix Table A1: hits: detections data at the level of individual hits. runs: detections data associated with a run (continuous detections of a unique tag on a given receiver). batches: detections data for a given receiver and boot number. tags: metadata related to tags, e.g., unique identifier, tag characteristics (e.g., burst interval). tagDep: metadata related to tag deployments, e.g., deployment date, location, and species. recvDeps: metadata related to receiver deployments, e.g., deployment date, location, receiver characteristics. antDeps: metadata related to antenna deployments, e.g., deployment height, angle, antenna type. species: metadata related to species, e.g., unique identifier, scientific name, common name. projs: metadata related to projects, e.g., project name, principal investigator. gps: metadata related to gps position of receiver. Because the file is a dplyr::src_sqlite file, all of the dplyr functions can be used to filter and summarize your .motus database, without needing to first save the data as a flat file, i.e., a typical two-dimensional dataframe with every record for each field filled in. Within the .motus database, the virtual table ‘alltags’ contains everything most users will need, and can be accessed using the dplyr tbl() function: df &lt;- tbl(t, &quot;alltags&quot;) If you look at the underlying structure of the data using str(), you will see that df is a list of length 2: str(df) The first part of the list, ‘src’, is a list that provides details of the SQLiteConnection, which includes information on where the database is stored. The second part of the list, ‘ops’, is also a list, and includes the names of the variables included in the ‘alltags’ table. In other words, in its current form, the R object ‘df’ does not hold the data itself (i.e., it is a virtual table); rather, it includes the database structure and information required to connect to the underlying data in the .motus file. As stated above, the advantage of storing the data in this way is that it saves memory when accessing very large databases, and the dplyr package can be used to manipulate and summarize the ‘alltags’ table before collecting the results into a typical “flat” format dataframe. The following table lists the parameters available in the ‘alltags’ table, along with a description of each parameter. Table 3.1: Description of fields in the tag detections database Field Description hitID unique Motus ID for this tag detection runID unique Motus ID for the run this detection belongs to batchID unique Motus ID for the processing batch this detection came from ts Timestamp, in seconds since 1 Jan, 1970 GMT; precision: 0.1 ms (SG); 2.5 ms (Lotek). sig Signal strength in “native units”; for SG: dB (max) (logarithmic, 0 = max possible, -10 = 0.1 * max, etc.); for Lotek: raw value (0…255) sigSD Std. dev. in signal strength among pulses in this burst. SG Only; NA for Lotek noise Estimate of background radio noise when tag detected, in dB (max) for SG; NA for Lotek freq frequency offset from antenna listening frequency, in kHz for SG only; NA for Lote freqSD Std. dev. of freq offset among pulses in this burst, in kHz. Values larger than 0.1 kHz suggest a bogus detection. SG only; NA for Lotek. slop Total absolute difference (milliseconds) in inter-pulse intervals for this burst between registration and detection. SG only; NA for Lotek burstSlop Signed difference (seconds) between detection and registration burst intervals. This is always 0 for the first burst in a run (see posInRun) done logical: is run finished? motusTagID Motus tag ID - unique to each individual tag registered ant Antenna code (for sensorgnomes, USB port number; for Lotek, whatever they use, usually numeric, but can be e.g. AH0) runLen Number of tag bursts in the current run; constant for all records having the same runID bootnum boot session of receiver for SG; NA for Lotek tagProjectID The ID of the project that manages this tag. id manufacturer ID tagType all rows are “ID”?? codeSet For coded tags, the name of the codeset (e.g. ‘Lotek-3’) mfg tag manufacturer tagModel manufacturer’s model name for a tag (e.g. ‘NTQB-3-2’) tagLifespan Estimated lifespan of tag (days) nomFreq Nominal tag frequency (MOTUS: Nominal frequency receiver was tuned to, in Mhz. This really only applies to SG, where we usually tune 4 kHz below the nominal tag frequency. So in that case, antFreq = 166.376 while nomFreq = 166.380 tagBI burst interval of tag, in seconds (e.g., 5.8984) pulseLen Tag pulse length (milliseconds), if applicable. This value is only assigned based on the sample recording of the tag. speciesID Unique numeric Motus ID (integer) for the species on which the tag was deployed markerNumber Number for any additional marker placed on organism (e.g., bird band #) markerType Type of additional marker (e.g. metal band) depLat Latitude of tag deployment, in decimal degrees N - negative values for Southern hemisphere depLon Longitude of tag deployment, in decimal degrees E - negative values for Western hemisphere depAlt Altitude of tag deployment, in meters ASL comments Additional comments or unclassified metadata for tag (often in JSON format) startCode Integer code giving method for determining tag deployment start timestamp endCode Integer code giving method for determining tag deployment end timestamp fullID full tag ID as PROJECT#MFGID:BI@NOMFREQ. Not necessarily unique over time. See motusTagID for a unique tag recv Serial number of the receiver; e.g., SG-1234BBBK5678 or Lotek-12345 site Name assigned to a site by the project manager (e.g. location name). This field is optional, and the same label can be used for multiple deployments. isMobile Logical; whether the sensor is deployed on a mobile platform (eg. a ship) projID The unique (numeric) ID of the project that deployed this receiver (e.g., 8) antType Character; Antenna Type, e.g. “9-element Yagi”, “Omni” antBearing Numeric; Compass direction antenna main axis is pointing at (degrees clockwise from local magnetic North 0-360°) antHeight Numeric; Height (meters) of antenna main axis above ground cableLen Numeric; Length of coax cable (meters) connecting antenna to funcubedongle radio (optional) cableType Type of coax cable connecting antenna to funcubedongle radio (optional) mountDistance Numeric; Distance (meters) between antenna mounting (axis centre) and receiver GPS; SG only mountBearing Numeric; Bearing of base of antenna mounting from receiver GPS (degrees clockwise from magnetic north: 0-360); SG only polarization1 Numeric; Antenna polarization angle: azimuth component (degrees clockwise from local magnetic north) polarization2 Numeric; Antenna polarization angle: elevation component (degrees above horizon) spEN Species English (common) name spFR Species French (common) name spSci Species scientific name spGroup Species group, e.g., BIRDS, BATS tagProj Short label of project that deployed the tag, e.g., “HolbSESA” projID Short label of project that deployed the receiver lat Latitude of receiver GPS location at time of writing the hourly detections file (degrees North) lon Longitude of receiver GPS location at time of writing the hourly detections file (degrees East) alt Altitude of receiver GPS at time of writing the hourly detections file (meters) 3.3.1 Convert the virtual ‘alltags’ table to a flat dataframe If you want your entire dataframe in a typical “flat” format, i.e., with every record for each field filled in, you can use the collect() function. The output can then be used to generate a .rds or .csv file of your data, but we caution that producing such a table using the full suite of fields can chew up a lot of memory, and can slow R down considerably when dealing with large datasets: df.flat &lt;- df %&gt;% collect %&gt;% as.data.frame ## for all fields in the df head(df.flat) ## Look at first 6 rows of your df summary(df.flat) ## summary of each column in your df str(df.flat) ## Look at the structure of your data fields names(df.flat) ## field names If you want to load only part of your entire data frame (eg. certain fields, only certain tags, all tags from a specified project, species, etc.), you can use dplyr funtions to filter results before collecting the data into a flat dataframe. Some examples are below: To select certain fields; df.flat.subset &lt;- select(df, recv, ant, motusTagID) %&gt;% distinct %&gt;% collect %&gt;% as.data.frame ## to grab a subset of fields, in this case a unique list of motus tag IDs at each receiver and antenna. To select certain tag IDs; df.flat.subset &lt;- filter(df, motusTagID %in% c(9939, 25643)) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of motus tag IDs 9939 and 25643 To select a specified species; df.flat.subset &lt;- filter(df, speciesID == 15580) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of Swainson&#39;s Thrush by species ID df.flat.subset &lt;- filter(df, spEN == &quot;Swainson&#39;s Thrush&quot;) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of Swainson&#39;s Thrush by English name You can also summarize your data before converting to a flat file. For example, to find the first hourly detection of each tag in each hour by receiver and antenna, you could do this: hourly &lt;- df %&gt;% mutate (hour = 3600 * round(ts / 3600, 0)) %&gt;% distinct (recv, ant, motusTagID, hour) ## and collect these into a data.frame hh &lt;- hourly %&gt;% collect %&gt;% as.data.frame 3.3.2 Export a “flat” dataframe and save as a .csv on your computer The below example is how you would save the flat file called “df.flat” within R, as a .csv file called “motus_detecitons.csv” on your computer in the location C:/data. write.csv(df.flat, &quot;C:/data/motus_detections.csv&quot;) ## &quot;df.flat&quot;&quot; is the name of the flat file within R that you want to convert to a .csv ## &quot;C:/data/&quot; is the the location where you would like your .csv stored ## &quot;motus_detections.csv&quot;, is the name of the .csv file you are creating, this can be anything you like but must end with .csv. "],
["checking-metadata-and-cleaning-false-positives.html", "4 Checking Metadata and Cleaning False Positives 4.1 Checking for missing metadata 4.2 Searching for false positives", " 4 Checking Metadata and Cleaning False Positives Once you have your data in R, it is good practice to run data summaries to check for missing tag or receiver deployment metadata and for false positive detections of your tags. 4.1 Checking for missing metadata Ensuring your metadata is up to date and accurate means detection data will be be properly linked to your project, and allow other users to benefit fully from the network. Missing or incorrect tag metadata can result in a lack of tag detections in your data. For example, if deployment date is missing or wrong, the tag finder, which processes the data from each receiver in the network, might not look for your tag in the data, or might not look at the appropriate time when the tag is actually active. This will result in missing tags in your detections data. Missing or incorrect receiver metadata can result in a loss of information for both your project and the projects of other Motus users. For example, missing deployment latitude and longitude can result in a loss of information on the location of a receiver. Particularly when the same receiver is moved from one location to another, it is important your metadata reflect this, so that other users can properly analyze their data. Receiving antenna properties 4.1.1 Tag Metadata Only tags registered with Motus (https://motus.org/tag-registration/) prior to deployment will appear in detection data. To view a full list of tags registered to your project: INSERT CODE If previously registered tags are missing from your data, please contact motus@birdscanada.org Required tag metadata includes deployment start date/time, end date/time if applicable, deployment latitude, deployment longitude, and species. You can determine which of your tags are missing this metadata as follows: INSERT CODE Please update missing tag metadata online at &lt;www.motus.org&gt; by logging in to your project and selecting the ‘Manage your tags’ option. 4.1.2 Receiver Metadata To obtain detection data from a receiver, it must be registered online to your project by it’s serial number. Receiver deployments are then required to link the appropriate metadata to each detection. To determine a list of receivers registered to your project: INSERT CODE If you are missing any receivers, please register them online through your project management page Each receiver requires a deployment which includes a deployment name, site, station type, deployment start/end dates/times, latitude, longitude, and antenna properties including port number, antenna type, and bearing. To view a full list of your current deployments: INSERT CODE To view which current deployments are missing required information: INSERT CODE Any missing receiver metadata needs to be updated online. If you have updated any metadata online, you’ll need to force an update on the data you have downloaded, it’s good practice to check for updates prior to any analysis as other users may have updated metadata associated with your detection files: t &lt;- tagme(projRecv = 123, forceMeta = TRUE) 4.2 Searching for false positives You may need to check it for false positives, particularely at sites with high levels of background noise, below we outline a number of ways to determine if detections are likely false positives. NOT DONE "],
["exploring-data-with-the-motus-r-package.html", "5 Exploring data with the Motus R package 5.1 Summarizing your data 5.2 Plotting your data", " 5 Exploring data with the Motus R package There are a number of functions within the Motus package that will allow you to quickly explore your data. This section provides examples of how you can use these functions through summaries and visualizations. 5.1 Summarizing your data 5.2 Plotting your data "]
]
