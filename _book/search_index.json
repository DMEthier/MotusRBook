[
["index.html", "R for Motus A walk through the use of R for Motus automated radio-telemetry data", " R for Motus Tara L. Crewe and Zoe Crysler 2017-10-18 A walk through the use of R for Motus automated radio-telemetry data Our goal with this online ‘handbook’ is to show Motus (https://motus.org) users how to use the Motus R package (https://github.com/jbrzusto/motus), along with other stand-alone R packages (e.g., ggplot2), to import tag detection data for their project or receiver; explore their data through visualizations and summaries; transform their data, e.g., by determining time since sunrise/sunset or magnetic declination; and to run various analytical procedures. This book therefore goes beyond simply highlighting the functionalities of the Motus R package - it also shows users, who may not be experts in R, to use additional R packages to do basic summaries and plots. We hope the contents will be of use, and if you have suggestions for additional examples, please let us know by emailing motus@birdscanada.org. "],
["introduction.html", "1 Introduction 1.1 What this book does not cover 1.2 Prerequisites 1.3 How this book is organized 1.4 Sample dataset 1.5 Acknowledgements", " 1 Introduction The Motus Wildlife Tracking System (‘Motus’; Taylor et al. 2017; https://www.motus.org) is an international, collaborative automated radio-telemetry network that is used to track the movement and behaviour of primarily small flying organisms affixed with digitally encoded radio-transmitters. Motus has its roots in the SensorGnome network piloted in 2012-2013. In 2014, a major infrastructure expansion was made possible through a Canada Foundation for Innovation grant to Western University, The University of Guelph, and Acadia University. Since then, Motus has continued to grow through the collaboration of independent researchers and organizations https://motus.org/about/, and is now managed as a program of Bird Studies Canada (https://www.birdscanada.org) in partnership with Acadia University. Motus is unique among automated telemetry arrays in that all researchers in a geographic region (e.g., the Americas or Europe) use a shared radio frequency. This allows tagged animals to be detected by any receiving station across the network, greatly broadening the spatial scope of potential research questions. Motus users also use a shared data infrastructure and web portal: all data collected from across the network are centrally stored and archived, which allows users to access detections of their tags by anyone’s receiver in the network, and individuals that maintain receivers have access to all detections of anyone’s tags on those receivers. Having a shared data infrastructure also means that users can benefit from R functions written specifically for Motus data by any and all users. A Motus R package is in continual development, and the intent of this online ‘handbook’ is to help users learn how the various functionalities of the package, and additional R packages like ggplot, can be used to retrieve tag detections, explore, visualize, transform, and analyze Motus data. The content of the handbook will continue to evolve and grow along with the analytical needs of the network. Those interested in contributing code to the Motus R package or this handbook can send proposed additions to Tara Crewe (tcrewe@birdscanada.org) or Zoe Crysler (zcrysler@birdscanada.org) (??). Taylor, P. D., T. L. Crewe, S. A. Mackenzie, D. Lepage, Y. Aubry, Z. Crysler, G. Finney, C. M. Francis, C. G. Guglielmo, D. J. Hamilton, R. L. Holberton, P. H. Loring, G. W. Mitchell, D. R. Noriis, J. Paquet, R. A. Ronconi, J. Smetzer, P. A. Smith, L. J. Welch, and B. K. Woodworth. 2017. The Motus Wildlife Tracking System: a collaborative research network to enhance the understanding of wildlife movement. Avian Conservation and Ecology 12(1):8. https://doi.org/10.5751/ACE-00953-120108. 1.1 What this book does not cover This book does not currently cover how to register radio tags with Motus, manage tags and station deployments, upload data, and so on. Information to guide you through those tasks can be found under the ‘resources’ tab on the Motus website at https://motus.org/resources/. Please remember to register your tags and enter tag and station metadata with Motus prior to deploying your tags. Please also see https://motus.org/policy/ to review our collaboration policy and tag registration and fee schedule. 1.2 Prerequisites This book assumes that you have a basic understanding of R. If you are new to R, we highly recommend ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham (http://r4ds.had.co.nz/), which covers how to import, visualize, and summarize data in R using the Tidyverse collection of R packages https://www.tidyverse.org/. It also provides useful tips for organizing your workflow to create clean, reproducible code (http://r4ds.had.co.nz/workflow-projects.html). We follow their lead by using Tidyverse throughout this book, and where possible within the package functions. 1.3 How this book is organized Each section of this book will begin with a paragraph or figure describing the broader intention or outcome of the section, followed by details on how to get there using R. For example, the section on accessing and downloading tag detection data begins with a screenshot of the structure of a dataframe, followed by the R code required to access the data. 1.4 Sample dataset Throughout this book we use a subset of data from the James Bay Shorebird Project to illustrate how to access, manage, and analyze Motus data in R. The James Bay Shorebird Project conducts monitoring and research on shorebirds staging along the James Bay coast, and is a collaborating effort among the Ontario Ministry of Natural Resources and Forestry, Bird Studies Canada, Trent University, and Environment and Climate Change Canada’s Canadian Wildlife Service, in conjunction with a larger conservation initiative involving James Bay first nations and Nature Canada. The Royal Ontario Museum was a contributing partner until 2016. The goals of the project are to 1) improve our ability to estimate indices of abundance and population trends for shorebird species staging along the western James Bay coast, 2) understand movement patterns and their causes, and 3) identify the relative importance of shorebird staging sites and their habitats. Collectively, this information will aid in the development of conservation measures for Red Knot and other shorebird species through habitat protection like Western Hemisphere Shorebird Reserve Network (WHSRN) designation. More information can be viewed on the James Bay Shorebird Project website at https://www.jamesbayshorebirdproject.com/, on Facebook https://www.facebook.com/jamesbayshorebirdproject/, or by contacting their project lead: Christian Friis Wildlife Biologist Canadian Wildlife Service Environment and Climate Change Canada / Government of Canada christian.friis@canada.ca / Tel: 416.739.4908 biologiste de la faune Service canadien de la faune Environnement et Changement Climatique Canada / Gouvernement du Canada christian.friis@canada.ca / Tél. : 416.739.4908 1.5 Acknowledgements Some of the text included in this book was adapted from John Brzustowski’s github repository for the Motus R package at: https://github.com/jbrzusto/motus. Motus was conceived as the SensorGnome network by Philip Taylor and John Brzustowski at Acadia University. Initial expansion of the network was supported by a Canada Foundation for Innovation Grant to Western University (Christopher Guglielmo), The University of Guelph (D. Ryan Norris), and Acadia University (Philip Taylor). The development of the Motus web interface, R package, and accompanying handbook were made possible through a Canarie grant to Bird Studies Canada (https://www.canarie.ca/). Motus continues to grow as a program of Bird Studies Canada, through the collaboration of numerous independent researchers, organizations, and individuals. A non-exhaustive list of Motus partners and collaborators can be found at https://motus.org/data/partners.jsp. If your organization is not listed, please contact motus@birdscanada.org. Many people have worked together to bring Motus technology, the web interface, and R-package together. The core ‘Motus Team’ includes John Brzustowski, Zoe Crysler, Tara Crewe, Jeremy Hussell, Catherine Jardine, Denis Lepage, Stuart Mackenzie, Paul Morrill, and Philip Taylor. "],
["loading-the-motus-r-package.html", "2 Loading the Motus R Package 2.1 User Authentication 2.2 Internal data processing", " 2 Loading the Motus R Package There are two R packages available to Motus users: motusClient: provides functions to download and update detections data and tag and receiver deployment metadata from the Motus server. motus: provides functions to output summary plots, and to transform (add sun rise/sun set times), and analyze Motus data. Motus users can install the latest stable versions of the R packages using the following code. You only need to install the packages once, but once installed, you do need to load each package (using library() or require()) each time you open a new R session. Please note that some functionalities of the devtools package may require updated versions of R and RStudio. To avoid errors, please ensure you are using the most recent releases of R (https://www.r-project.org/) and RStudio (https://www.rstudio.com/products/RStudio/), and update your R packages using update.pacakges() in the R console. update.packages() ## to update your existing R packages install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this library(devtools) ## load devtools # install motusClient for data download install_github(&quot;jbrzusto/motusClient@master&quot;) ## the last stable version library(motusClient) # install motus for data manipulation, visualization and analysis install_github(&quot;jbrzusto/motus@master&quot;) ## the last stable version library(motus) For developers, the ‘staging’ branch is for work-in-progress. Install it with: install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this library(devtools) install_github(&quot;jbrzusto/motus@staging&quot;) ## the development version library(motus) Throughout the book, we use Tidyverse https://www.tidyverse.org/, which is a collection of R packages, including tidyr() and dplyr(). These can be installed with: install.packages(&quot;tidyverse&quot;) ## again, you only need to install once. library(tidyverse) More information on Tidyverse can be found at https://www.tidyverse.org/, or by browsing ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham: http://r4ds.had.co.nz/. 2.1 User Authentication The first time you call a function using the Motus R package, you will be asked for your motus.org username and password to authenticate your access to project data. This will only happen once per R session. If you do not have a Motus user name and password, you can sign up at https://motus.org/data/user/new. Permission to access project data will then be granted by Motus staff or the project principal investigator. 2.2 Internal data processing As an animal moves within the detection range of a Motus station, radio transmissions, or ‘bursts’, are detected by antenna(s) and recorded by a receiver. These raw detection data are either uploaded to the Motus database instantaneously via internet connection, or downloaded from the receiver and uploaded to Motus manually. Behind the scenes, various functions read and process the raw detections data to produce the tag detections file that users access using the R package (see ‘Data Import’ below). While most users will not need to call on the internal data processing functions, a complete list of functions within the Motus server R package can be found on GitHub: https://github.com/jbrzusto/motusServer. The code behind each function can be viewed on GitHub, or by typing the following in the R console after loading the R package, replacing ‘function.name’ with the name of the R function of interest: function.name() "],
["accessing-and-understanding-detections-data.html", "3 Accessing and understanding detections data 3.1 Database types 3.2 Load relevant R packages 3.3 Importing tag detections 3.4 Data structure", " 3 Accessing and understanding detections data It is important to note that the success of the Motus network is dependent on the timely upload of detection data from receivers, and on the maintenance of accurate and up to date tag and receiver metadata by collaborators. Users are encouraged to check for updated detection data and metadata each time they run an analysis, because collaborators can add detection data and metadata at any time, and these could influence the completeness of your own detections data. 3.1 Database types There are two types of tag databases: receiver database: includes all detections of any registered tags from a single receiver. A receiver database has a name like SG-1234BBBK5678.motus; where the name is the serial number of the receiver. project database: includes all detections of your registered tags from across the motus network. A tag project database has a name like project-123.motus, where the number is the motus project ID. These two databases correspond to the basic model of data sharing: you get all detections of anyone’s tags by your receivers (i.e., one receiver tag database for each receiver you deploy) you get all detections of your tags by anyone’s receivers (i.e., one project tag database for each of your motus projects) 3.2 Load relevant R packages require(devtools) require(tidyverse) 3.3 Importing tag detections Your project’s .motus file is available for download at https://motus.org/data/downloads under your project profile. Once downloaded, make sure that you have the appropriate packages installed and loaded in R as outlined in Chapter 2-LoadingPackage. Once packages are loaded, you can import your tag detections into R using the following code: file.name &lt;- &quot;./data/project-8.motus&quot; ## replace with the full location of your project data t &lt;- dplyr::src_sqlite(file.name) 3.4 Data structure Your tag database is stored as an SQLite (‘dplyr::src_sqlite’) file with the extension ‘.motus’. The sqlite format was chosen because: it is flexible, allowing for many data formats. it is accessible from many software platforms (not just R). it is appendable: the database can be created and updated on disk without having to read in and resave the entire contents. This will save time and computer memory when searching to see if any new detections are available for your project or receiver. The .motus file contains a series of interelated tables where data are stored in a condensed format to save memory. The following tables are included in the .motus file; a complete list of parameters stored in each table can be found in Appendix Table A1: hits: detections data at the level of individual hits. runs: detections data associated with a run (continuous detections of a unique tag on a given receiver). batches: detections data for a given receiver and boot number. tags: metadata related to tags, e.g., unique identifier, tag characteristics (e.g., burst interval). tagDeps: metadata related to tag deployments, e.g., deployment date, location, and species. recvDeps: metadata related to receiver deployments, e.g., deployment date, location, receiver characteristics. antDeps: metadata related to antenna deployments, e.g., deployment height, angle, antenna type. species: metadata related to species, e.g., unique identifier, scientific name, common name. projs: metadata related to projects, e.g., project name, principal investigator. gps: metadata related to Geographic Positioning System (GPS) position of receiver. Because the file is a dplyr::src_sqlite file, all of the dplyr functions can be used to filter and summarize your .motus database, without needing to first save the data as a flat file, i.e., a typical two-dimensional dataframe with every record for each field filled in. You can access each table in the .motus file using the tbl() function, for example: # tag deployment metadata tagMeta &lt;- tbl(t, &quot;tagDeps&quot;) head(tagMeta) ## # Source: lazy query [?? x 19] ## # Database: sqlite 3.19.3 [/Users/zoecrysler/Documents/BSC ## # 2016/Motus/MotusRBook/data/project-8.motus] ## deployID tagID projectID status tsStart tsEnd deferSec speciesID ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 1243 17382 8 &lt;NA&gt; 1376982000 1381815586 0 4690 ## 2 1244 17383 8 &lt;NA&gt; 1376982000 1381815808 0 4690 ## 3 1245 17384 8 &lt;NA&gt; 1376982000 1381815863 0 4690 ## 4 1247 17386 8 &lt;NA&gt; 1376982000 1381870923 0 4690 ## 5 1248 17387 8 &lt;NA&gt; 1376982000 1381870923 0 4690 ## 6 1250 17389 8 &lt;NA&gt; 1376982000 1381924030 0 4690 ## # ... with 11 more variables: markerNumber &lt;chr&gt;, markerType &lt;chr&gt;, ## # latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, elevation &lt;dbl&gt;, comments &lt;chr&gt;, ## # id &lt;int&gt;, bi &lt;dbl&gt;, tsStartCode &lt;int&gt;, tsEndCode &lt;int&gt;, fullID &lt;chr&gt; tagMeta$ops$vars ## [1] &quot;deployID&quot; &quot;tagID&quot; &quot;projectID&quot; &quot;status&quot; ## [5] &quot;tsStart&quot; &quot;tsEnd&quot; &quot;deferSec&quot; &quot;speciesID&quot; ## [9] &quot;markerNumber&quot; &quot;markerType&quot; &quot;latitude&quot; &quot;longitude&quot; ## [13] &quot;elevation&quot; &quot;comments&quot; &quot;id&quot; &quot;bi&quot; ## [17] &quot;tsStartCode&quot; &quot;tsEndCode&quot; &quot;fullID&quot; If you look at the underlying structure of these tables using str(), you will see that each is a list of length 2: str(tagMeta) ## List of 2 ## $ src:List of 2 ## ..$ con :Formal class &#39;SQLiteConnection&#39; [package &quot;RSQLite&quot;] with 6 slots ## .. .. ..@ ptr :&lt;externalptr&gt; ## .. .. ..@ dbname : chr &quot;/Users/zoecrysler/Documents/BSC 2016/Motus/MotusRBook/data/project-8.motus&quot; ## .. .. ..@ loadable.extensions: logi TRUE ## .. .. ..@ flags : int 70 ## .. .. ..@ vfs : chr &quot;&quot; ## .. .. ..@ ref :&lt;environment: 0x7fe5de83f208&gt; ## ..$ disco:&lt;environment: 0x7fe5deb9db18&gt; ## ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;src_dbi&quot; &quot;src_sql&quot; &quot;src&quot; ## $ ops:List of 2 ## ..$ x :Classes &#39;ident&#39;, &#39;character&#39; chr &quot;tagDeps&quot; ## ..$ vars: chr [1:19] &quot;deployID&quot; &quot;tagID&quot; &quot;projectID&quot; &quot;status&quot; ... ## ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_base_remote&quot; &quot;op_base&quot; &quot;op&quot; ## - attr(*, &quot;class&quot;)= chr [1:4] &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; &quot;tbl&quot; The first part of the list, ‘src’, is a list that provides details of the SQLiteConnection, which includes information on where the database is stored. The second part of the list, ‘ops’, is also a list, and includes the names of the variables (‘tagMeta\\(ops\\)vars’) included in the table. In other words, in its current form, the R object ‘tagMeta’ does not hold the data itself (i.e., it is a virtual table); rather, it includes the database structure and information required to connect to the underlying data in the .motus file. As stated above, the advantage of storing the data in this way is that it saves memory when accessing very large databases, and the dplyr package can be used to manipulate and summarize the tables before collecting the results into a typical “flat” format dataframe. For your convienience, the virtual table ‘alltags’ contains all fields that most users will need from the various .motus tables, and can also be accessed using the dplyr tbl() function: df &lt;- tbl(t, &quot;alltags&quot;) The following table lists the parameters available in the ‘alltags’ table, along with a description of each parameter. Table 3.1: Description of fields in the tag detections database Field Description hitID unique Motus ID for this tag detection runID unique Motus ID for the run this detection belongs to batchID unique Motus ID for the processing batch this detection came from ts timestamp, in seconds since 1 Jan, 1970 GMT; precision: 0.1 ms (SG); 2.5 ms (Lotek). sig signal strength in “native units”; for SG: dB (max) (logarithmic, 0 = max possible, -10 = 0.1 * max, etc.); for Lotek: raw value (0…255) sigSD std. dev. in signal strength among pulses in this burst. SG Only; NA for Lotek noise estimate of background radio noise when tag detected, in dB (max) for SG; NA for Lotek freq frequency offset from antenna listening frequency, in kHz for SG only; NA for Lote freqSD std. dev. of freq offset among pulses in this burst, in kHz. Values larger than 0.1 kHz suggest a bogus detection. SG only; NA for Lotek. slop total absolute difference (milliseconds) in inter-pulse intervals for this burst between registration and detection. SG only; NA for Lotek burstSlop signed difference (seconds) between detection and registration burst intervals. This is always 0 for the first burst in a run (see posInRun) done logical: is run finished? motusTagID Motus tag ID - unique to each individual tag registered ant antenna code (for sensorgnomes, USB port number; for Lotek, whatever they use, usually numeric, but can be e.g. AH0) runLen number of tag bursts in the current run; constant for all records having the same runID bootnum boot session of receiver for SG; NA for Lotek tagProjectID ID of the project that manages this tag. id manufacturer ID tagType all rows are “ID”?? codeSet for coded tags, the name of the codeset (e.g. ‘Lotek-3’) mfg tag manufacturer tagModel manufacturer’s model name for a tag (e.g. ‘NTQB-3-2’) tagLifespan estimated lifespan of tag (days) nomFreq nominal tag frequency (MOTUS: Nominal frequency receiver was tuned to, in Mhz. This really only applies to SG, where we usually tune 4 kHz below the nominal tag frequency. So in that case, antFreq = 166.376 while nomFreq = 166.380 tagBI burst interval of tag, in seconds (e.g., 5.8984) pulseLen tag pulse length (milliseconds), if applicable. This value is only assigned based on the sample recording of the tag. speciesID unique numeric Motus ID (integer) for the species on which the tag was deployed markerNumber number for any additional marker placed on organism (e.g., bird band #) markerType type of additional marker (e.g. metal band) depLat latitude of tag deployment, in decimal degrees N - negative values for Southern hemisphere depLon longitude of tag deployment, in decimal degrees E - negative values for Western hemisphere depAlt altitude of tag deployment, in meters ASL comments additional comments or unclassified metadata for tag (often in JSON format) startCode integer code giving method for determining tag deployment start timestamp endCode integer code giving method for determining tag deployment end timestamp fullID full tag ID as PROJECT#MFGID:BI@NOMFREQ. Not necessarily unique over time. See motusTagID for a unique tag recv serial number of the receiver; e.g., SG-1234BBBK5678 or Lotek-12345 site name assigned to a site by the project manager (e.g. location name). This field is optional, and the same label can be used for multiple deployments. isMobile logical; whether the sensor is deployed on a mobile platform (eg. a ship) projID unique (numeric) ID of the project that deployed this receiver (e.g., 8) antType character; antenna type, e.g. “9-element Yagi”, “Omni” antBearing numeric; compass direction antenna main axis is pointing at (degrees clockwise from local magnetic North 0-360) antHeight numeric; height (meters) of antenna main axis above ground cableLen numeric; length of coax cable (meters) connecting antenna to funcubedongle radio (optional) cableType type of coax cable connecting antenna to funcubedongle radio (optional) mountDistance numeric; distance (meters) between antenna mounting (axis centre) and receiver GPS; SG only mountBearing numeric; bearing of base of antenna mounting from receiver GPS (degrees clockwise from magnetic north: 0-360); SG only polarization1 numeric; antenna polarization angle: azimuth component (degrees clockwise from local magnetic north) polarization2 numeric; antenna polarization angle: elevation component (degrees above horizon) spEN species English (common) name spFR species French (common) name spSci species scientific name spGroup species group, e.g., BIRDS, BATS tagProj short label of project that deployed the tag, e.g., “HolbSESA” projID short label of project that deployed the receiver lat latitude of receiver GPS location at time of writing the hourly detections file (degrees North) lon longitude of receiver GPS location at time of writing the hourly detections file (degrees East) alt altitude of receiver GPS at time of writing the hourly detections file (meters) 3.4.1 Convert a virtual table to a flat dataframe If you want your entire dataframe in a typical “flat” format, i.e., with every record for each field filled in, you can use the collect() function. The output can then be used to generate a .rds or .csv file of your data. However, we caution that producing such a table using the full suite of fields can chew up a lot of memory, and can slow R down considerably when dealing with large datasets: df.flat &lt;- df %&gt;% collect %&gt;% as.data.frame ## for all fields in the df names(df.flat) ## field names ## [1] &quot;hitID&quot; &quot;runID&quot; &quot;batchID&quot; &quot;ts&quot; ## [5] &quot;sig&quot; &quot;sigsd&quot; &quot;noise&quot; &quot;freq&quot; ## [9] &quot;freqsd&quot; &quot;slop&quot; &quot;burstSlop&quot; &quot;done&quot; ## [13] &quot;motusTagID&quot; &quot;ant&quot; &quot;runLen&quot; &quot;bootnum&quot; ## [17] &quot;tagProjID&quot; &quot;id&quot; &quot;tagType&quot; &quot;codeSet&quot; ## [21] &quot;mfg&quot; &quot;tagModel&quot; &quot;tagLifespan&quot; &quot;nomFreq&quot; ## [25] &quot;tagBI&quot; &quot;pulseLen&quot; &quot;speciesID&quot; &quot;markerNumber&quot; ## [29] &quot;markerType&quot; &quot;depLat&quot; &quot;depLon&quot; &quot;depAlt&quot; ## [33] &quot;comments&quot; &quot;startCode&quot; &quot;endCode&quot; &quot;fullID&quot; ## [37] &quot;recv&quot; &quot;site&quot; &quot;isMobile&quot; &quot;projID&quot; ## [41] &quot;antType&quot; &quot;antBearing&quot; &quot;antHeight&quot; &quot;cableLen&quot; ## [45] &quot;cableType&quot; &quot;mountDistance&quot; &quot;mountBearing&quot; &quot;polarization1&quot; ## [49] &quot;polarization2&quot; &quot;spEN&quot; &quot;spFR&quot; &quot;spSci&quot; ## [53] &quot;spGroup&quot; &quot;tagProj&quot; &quot;proj&quot; &quot;lat&quot; ## [57] &quot;lon&quot; &quot;alt&quot; str(df.flat) ## Look at the structure of your data fields ## &#39;data.frame&#39;: 149939 obs. of 58 variables: ## $ hitID : int 13188267 13188268 13278887 13278888 13394729 13394730 13394754 13394755 13395278 13395279 ... ## $ runID : int 1145488 1145488 1188221 1188221 1200490 1200490 1200497 1200497 1200553 1200553 ... ## $ batchID : int 58 58 1224 1224 64 64 64 64 64 64 ... ## $ ts : num 1.41e+09 1.41e+09 1.41e+09 1.41e+09 1.41e+09 ... ## $ sig : num 175 132 175 132 255 218 252 251 252 251 ... ## $ sigsd : num 0 0 0 0 0 0 0 0 0 0 ... ## $ noise : num -96 -96 -96 -96 -96 -96 -96 -96 -96 -96 ... ## $ freq : num 4 4 4 4 4 4 4 4 4 4 ... ## $ freqsd : num 0 0 0 0 0 0 0 0 0 0 ... ## $ slop : num 1e-04 1e-04 1e-04 1e-04 2e-04 2e-04 2e-04 2e-04 2e-04 2e-04 ... ## $ burstSlop : num 0 -0.002 0 -0.002 0 0.0066 0 -0.0056 0 -0.0056 ... ## $ done : int 1 1 0 0 1 1 1 1 1 1 ... ## $ motusTagID : int 10471 10471 10471 10471 10506 10506 10506 10506 10506 10506 ... ## $ ant : int 0 0 0 0 0 0 0 0 0 0 ... ## $ runLen : int 2 2 2 2 2 2 2 2 2 2 ... ## $ bootnum : int 1 1 132 132 1 1 1 1 1 1 ... ## $ tagProjID : int 8 8 8 8 8 8 8 8 8 8 ... ## $ id : chr &quot;28&quot; &quot;28&quot; &quot;28&quot; &quot;28&quot; ... ## $ tagType : chr &quot;ID&quot; &quot;ID&quot; &quot;ID&quot; &quot;ID&quot; ... ## $ codeSet : chr &quot;Lotek4&quot; &quot;Lotek4&quot; &quot;Lotek4&quot; &quot;Lotek4&quot; ... ## $ mfg : chr &quot;Lotek&quot; &quot;Lotek&quot; &quot;Lotek&quot; &quot;Lotek&quot; ... ## $ tagModel : chr &quot;NTQB-2&quot; &quot;NTQB-2&quot; &quot;NTQB-2&quot; &quot;NTQB-2&quot; ... ## $ tagLifespan : int NA NA NA NA NA NA NA NA NA NA ... ## $ nomFreq : num 166 166 166 166 166 ... ## $ tagBI : num 5.9 5.9 5.9 5.9 6.1 ... ## $ pulseLen : num 2.5 2.5 2.5 2.5 2.5 2.5 2.5 2.5 2.5 2.5 ... ## $ speciesID : int 4690 4690 4690 4690 4690 4690 4690 4690 4690 4690 ... ## $ markerNumber : chr &quot;257156244&quot; &quot;257156244&quot; &quot;257156244&quot; &quot;257156244&quot; ... ## $ markerType : chr &quot;metal band&quot; &quot;metal band&quot; &quot;metal band&quot; &quot;metal band&quot; ... ## $ depLat : num 44.6 44.6 44.6 44.6 44.6 ... ## $ depLon : num -67.8 -67.8 -67.8 -67.8 -67.8 ... ## $ depAlt : num NA NA NA NA NA NA NA NA NA NA ... ## $ comments : chr NA NA NA NA ... ## $ startCode : int NA NA NA NA NA NA NA NA NA NA ... ## $ endCode : int NA NA NA NA NA NA NA NA NA NA ... ## $ fullID : chr &quot;?proj?-8#28:5.9&quot; &quot;?proj?-8#28:5.9&quot; &quot;?proj?-8#28:5.9&quot; &quot;?proj?-8#28:5.9&quot; ... ## $ recv : chr NA NA NA NA ... ## $ site : chr NA NA NA NA ... ## $ isMobile : int NA NA NA NA 0 0 0 0 0 0 ... ## $ projID : int NA NA NA NA 10 10 10 10 10 10 ... ## $ antType : chr NA NA NA NA ... ## $ antBearing : num NA NA NA NA NA NA NA NA NA NA ... ## $ antHeight : num NA NA NA NA NA NA NA NA NA NA ... ## $ cableLen : num NA NA NA NA NA NA NA NA NA NA ... ## $ cableType : chr NA NA NA NA ... ## $ mountDistance: num NA NA NA NA NA NA NA NA NA NA ... ## $ mountBearing : num NA NA NA NA NA NA NA NA NA NA ... ## $ polarization1: num NA NA NA NA NA NA NA NA NA NA ... ## $ polarization2: num NA NA NA NA NA NA NA NA NA NA ... ## $ spEN : chr &quot;Semipalmated Sandpiper&quot; &quot;Semipalmated Sandpiper&quot; &quot;Semipalmated Sandpiper&quot; &quot;Semipalmated Sandpiper&quot; ... ## $ spFR : chr &quot;Bécasseau semipalmé&quot; &quot;Bécasseau semipalmé&quot; &quot;Bécasseau semipalmé&quot; &quot;Bécasseau semipalmé&quot; ... ## $ spSci : chr &quot;Calidris pusilla&quot; &quot;Calidris pusilla&quot; &quot;Calidris pusilla&quot; &quot;Calidris pusilla&quot; ... ## $ spGroup : chr &quot;BIRDS&quot; &quot;BIRDS&quot; &quot;BIRDS&quot; &quot;BIRDS&quot; ... ## $ tagProj : chr &quot;HolbSESA&quot; &quot;HolbSESA&quot; &quot;HolbSESA&quot; &quot;HolbSESA&quot; ... ## $ proj : chr NA NA NA NA ... ## $ lat : num 0 0 0 0 0 ... ## $ lon : num 0 0 0 0 0 ... ## $ alt : num 0 0 0 0 0 0 0 0 0 0 ... head(df.flat) ## Look at first 6 rows of your df ## hitID runID batchID ts sig sigsd noise freq freqsd slop ## 1 13188267 1145488 58 1411570640 175 0 -96 4 0 1e-04 ## 2 13188268 1145488 58 1411570688 132 0 -96 4 0 1e-04 ## 3 13278887 1188221 1224 1411570640 175 0 -96 4 0 1e-04 ## 4 13278888 1188221 1224 1411570688 132 0 -96 4 0 1e-04 ## 5 13394729 1200490 64 1411741849 255 0 -96 4 0 2e-04 ## 6 13394730 1200490 64 1411741928 218 0 -96 4 0 2e-04 ## burstSlop done motusTagID ant runLen bootnum tagProjID id tagType ## 1 0.0000 1 10471 0 2 1 8 28 ID ## 2 -0.0020 1 10471 0 2 1 8 28 ID ## 3 0.0000 0 10471 0 2 132 8 28 ID ## 4 -0.0020 0 10471 0 2 132 8 28 ID ## 5 0.0000 1 10506 0 2 1 8 416 ID ## 6 0.0066 1 10506 0 2 1 8 416 ID ## codeSet mfg tagModel tagLifespan nomFreq tagBI pulseLen speciesID ## 1 Lotek4 Lotek NTQB-2 NA 166.38 5.8985 2.5 4690 ## 2 Lotek4 Lotek NTQB-2 NA 166.38 5.8985 2.5 4690 ## 3 Lotek4 Lotek NTQB-2 NA 166.38 5.8985 2.5 4690 ## 4 Lotek4 Lotek NTQB-2 NA 166.38 5.8985 2.5 4690 ## 5 Lotek4 Lotek NTQB-2 NA 166.38 6.0962 2.5 4690 ## 6 Lotek4 Lotek NTQB-2 NA 166.38 6.0962 2.5 4690 ## markerNumber markerType depLat depLon depAlt comments startCode endCode ## 1 257156244 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## 2 257156244 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## 3 257156244 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## 4 257156244 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## 5 257156230 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## 6 257156230 metal band 44.559 -67.768 NA &lt;NA&gt; NA NA ## fullID recv site isMobile projID antType ## 1 ?proj?-8#28:5.9 &lt;NA&gt; &lt;NA&gt; NA NA &lt;NA&gt; ## 2 ?proj?-8#28:5.9 &lt;NA&gt; &lt;NA&gt; NA NA &lt;NA&gt; ## 3 ?proj?-8#28:5.9 &lt;NA&gt; &lt;NA&gt; NA NA &lt;NA&gt; ## 4 ?proj?-8#28:5.9 &lt;NA&gt; &lt;NA&gt; NA NA &lt;NA&gt; ## 5 ?proj?-8#416:6.1 Lotek-6303 manual 6303 0 10 &lt;NA&gt; ## 6 ?proj?-8#416:6.1 Lotek-6303 manual 6303 0 10 &lt;NA&gt; ## antBearing antHeight cableLen cableType mountDistance mountBearing ## 1 NA NA NA &lt;NA&gt; NA NA ## 2 NA NA NA &lt;NA&gt; NA NA ## 3 NA NA NA &lt;NA&gt; NA NA ## 4 NA NA NA &lt;NA&gt; NA NA ## 5 NA NA NA &lt;NA&gt; NA NA ## 6 NA NA NA &lt;NA&gt; NA NA ## polarization1 polarization2 spEN spFR ## 1 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## 2 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## 3 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## 4 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## 5 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## 6 NA NA Semipalmated Sandpiper Bécasseau semipalmé ## spSci spGroup tagProj proj lat lon alt ## 1 Calidris pusilla BIRDS HolbSESA &lt;NA&gt; 0 0 0 ## 2 Calidris pusilla BIRDS HolbSESA &lt;NA&gt; 0 0 0 ## 3 Calidris pusilla BIRDS HolbSESA &lt;NA&gt; 0 0 0 ## 4 Calidris pusilla BIRDS HolbSESA &lt;NA&gt; 0 0 0 ## 5 Calidris pusilla BIRDS HolbSESA Taylr 0 0 0 ## 6 Calidris pusilla BIRDS HolbSESA Taylr 0 0 0 summary(df.flat) ## summary of each column in your df ## hitID runID batchID ts ## Min. :13188267 Min. :1145488 Min. : 58 Min. :1.377e+09 ## 1st Qu.:21265452 1st Qu.:1764304 1st Qu.: 281 1st Qu.:1.408e+09 ## Median :22861194 Median :1789815 Median :5769 Median :1.409e+09 ## Mean :22084378 Mean :1779209 Mean :3028 Mean :1.405e+09 ## 3rd Qu.:22899098 3rd Qu.:1792824 3rd Qu.:5775 3rd Qu.:1.409e+09 ## Max. :28868881 Max. :3459713 Max. :6239 Max. :1.415e+09 ## ## sig sigsd noise freq ## Min. :-80.63 Min. : 0.000 Min. :-96.00 Min. :0.6666 ## 1st Qu.:-71.68 1st Qu.: 8.096 1st Qu.:-84.83 1st Qu.:4.1117 ## Median :-66.37 Median : 14.065 Median :-82.72 Median :4.4635 ## Mean :-65.27 Mean : 18.913 Mean :-80.73 Mean :4.5155 ## 3rd Qu.:-60.13 3rd Qu.: 24.405 3rd Qu.:-77.91 3rd Qu.:4.8747 ## Max. :255.00 Max. :133.169 Max. :-40.27 Max. :9.6847 ## ## freqsd slop burstSlop done ## Min. :0.00000 Min. :0.0000000 Min. :-0.0598000 Min. :0 ## 1st Qu.:0.00860 1st Qu.:0.0002000 1st Qu.:-0.0001000 1st Qu.:1 ## Median :0.01450 Median :0.0003000 Median : 0.0000000 Median :1 ## Mean :0.02328 Mean :0.0004799 Mean : 0.0001368 Mean :1 ## 3rd Qu.:0.02670 3rd Qu.:0.0005000 3rd Qu.: 0.0002000 3rd Qu.:1 ## Max. :0.27600 Max. :0.0056000 Max. : 0.0656000 Max. :1 ## ## motusTagID ant runLen bootnum ## Min. :10465 Min. :0.000 Min. : 2.00 Min. : 1.00 ## 1st Qu.:10472 1st Qu.:2.000 1st Qu.: 13.00 1st Qu.: 26.00 ## Median :10487 Median :2.000 Median : 26.00 Median : 26.00 ## Mean :11455 Mean :2.411 Mean : 48.95 Mean : 25.19 ## 3rd Qu.:10502 3rd Qu.:3.000 3rd Qu.: 53.00 3rd Qu.: 26.00 ## Max. :17399 Max. :4.000 Max. :500.00 Max. :353.00 ## ## tagProjID id tagType codeSet ## Min. :8 Length:149939 Length:149939 Length:149939 ## 1st Qu.:8 Class :character Class :character Class :character ## Median :8 Mode :character Mode :character Mode :character ## Mean :8 ## 3rd Qu.:8 ## Max. :8 ## ## mfg tagModel tagLifespan nomFreq ## Length:149939 Length:149939 Min. : NA Min. :166.3 ## Class :character Class :character 1st Qu.: NA 1st Qu.:166.4 ## Mode :character Mode :character Median : NA Median :166.4 ## Mean :NaN Mean :166.4 ## 3rd Qu.: NA 3rd Qu.:166.4 ## Max. : NA Max. :166.4 ## NA&#39;s :149939 ## tagBI pulseLen speciesID markerNumber ## Min. :5.898 Min. :2.5 Min. :4180 Length:149939 ## 1st Qu.:5.898 1st Qu.:2.5 1st Qu.:4690 Class :character ## Median :6.096 Median :2.5 Median :4690 Mode :character ## Mean :6.215 Mean :2.5 Mean :4690 ## 3rd Qu.:6.697 3rd Qu.:2.5 3rd Qu.:4690 ## Max. :7.097 Max. :2.5 Max. :4750 ## ## markerType depLat depLon depAlt ## Length:149939 Min. :44.52 Min. :-67.84 Min. : NA ## Class :character 1st Qu.:44.52 1st Qu.:-67.77 1st Qu.: NA ## Mode :character Median :44.56 Median :-67.77 Median : NA ## Mean :44.54 Mean :-67.77 Mean :NaN ## 3rd Qu.:44.56 3rd Qu.:-67.76 3rd Qu.: NA ## Max. :44.58 Max. :-67.76 Max. : NA ## NA&#39;s :149939 ## comments startCode endCode fullID ## Length:149939 Min. : NA Min. : NA Length:149939 ## Class :character 1st Qu.: NA 1st Qu.: NA Class :character ## Mode :character Median : NA Median : NA Mode :character ## Mean :NaN Mean :NaN ## 3rd Qu.: NA 3rd Qu.: NA ## Max. : NA Max. : NA ## NA&#39;s :149939 NA&#39;s :149939 ## recv site isMobile projID ## Length:149939 Length:149939 Min. :0 Min. : 8 ## Class :character Class :character 1st Qu.:0 1st Qu.: 8 ## Mode :character Mode :character Median :0 Median : 8 ## Mean :0 Mean : 8 ## 3rd Qu.:0 3rd Qu.: 8 ## Max. :0 Max. :10 ## NA&#39;s :73 NA&#39;s :73 ## antType antBearing antHeight cableLen ## Length:149939 Min. :168.0 Min. : NA Min. : NA ## Class :character 1st Qu.:168.0 1st Qu.: NA 1st Qu.: NA ## Mode :character Median :212.0 Median : NA Median : NA ## Mean :200.1 Mean :NaN Mean :NaN ## 3rd Qu.:212.0 3rd Qu.: NA 3rd Qu.: NA ## Max. :260.0 Max. : NA Max. : NA ## NA&#39;s :87 NA&#39;s :149939 NA&#39;s :149939 ## cableType mountDistance mountBearing polarization1 ## Length:149939 Min. : NA Min. : NA Min. : NA ## Class :character 1st Qu.: NA 1st Qu.: NA 1st Qu.: NA ## Mode :character Median : NA Median : NA Median : NA ## Mean :NaN Mean :NaN Mean :NaN ## 3rd Qu.: NA 3rd Qu.: NA 3rd Qu.: NA ## Max. : NA Max. : NA Max. : NA ## NA&#39;s :149939 NA&#39;s :149939 NA&#39;s :149939 ## polarization2 spEN spFR spSci ## Min. : NA Length:149939 Length:149939 Length:149939 ## 1st Qu.: NA Class :character Class :character Class :character ## Median : NA Mode :character Mode :character Mode :character ## Mean :NaN ## 3rd Qu.: NA ## Max. : NA ## NA&#39;s :149939 ## spGroup tagProj proj lat ## Length:149939 Length:149939 Length:149939 Min. : 0.00 ## Class :character Class :character Class :character 1st Qu.:44.56 ## Mode :character Mode :character Mode :character Median :44.56 ## Mean :44.56 ## 3rd Qu.:44.56 ## Max. :44.65 ## NA&#39;s :21158 ## lon alt ## Min. :-67.81 Min. :-0.10 ## 1st Qu.:-67.81 1st Qu.:12.60 ## Median :-67.81 Median :14.30 ## Mean :-67.80 Mean :14.77 ## 3rd Qu.:-67.81 3rd Qu.:16.20 ## Max. : 0.00 Max. :37.20 ## NA&#39;s :21158 NA&#39;s :21158 If you want to load only part of your entire data frame (eg. certain fields, only certain tags, all tags from a specified project, species, etc.), you can use dplyr funtions to filter the data before collecting into a flat dataframe. Some examples are below: To select certain fields: df.flat.subset &lt;- select(df, recv, ant, motusTagID) %&gt;% distinct %&gt;% collect %&gt;% as.data.frame ## to grab a subset of fields, in this case a unique list of motus tag IDs at each receiver and antenna. To select certain tag IDs: df.flat.subset &lt;- filter(df, motusTagID %in% c(9939, 25643)) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of motus tag IDs 9939 and 25643 To select a specified species: df.flat.subset &lt;- filter(df, speciesID == 15580) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of Swainson&#39;s Thrush by species ID df.flat.subset &lt;- filter(df, spEN == &quot;Swainson&#39;s Thrush&quot;) %&gt;% collect %&gt;% as.data.frame ## filter to only include detections of Swainson&#39;s Thrush by English name You can also summarize your data before converting to a flat file. For example, to find the first hourly detection of each tag in each hour by receiver and antenna, you could do this: hourly &lt;- df %&gt;% mutate (hour = 3600 * round(ts / 3600, 0)) %&gt;% distinct (recv, ant, motusTagID, hour) ## and collect these into a data.frame hh &lt;- hourly %&gt;% collect %&gt;% as.data.frame 3.4.2 Export your “flat” dataframe to a .csv file The below example is how you would save the flat file called “df.flat” within R, as a .csv file called “JB_raw.csv” on your computer in the ‘data’ folder of your working directory. In this case, JB stands for James Bay, and we are simply converting the data without subsetting. write.csv(df.flat, &quot;./data/JB_raw.csv&quot;) ## &quot;df.flat&quot;&quot; is the name of the flat file within R that you want to convert to a .csv ## &quot;./data/&quot; is the the location where you would like your .csv stored ## &quot;JB_raw.csv&quot;, is the name of the .csv file you are creating, this can be anything you like but must end with .csv. "],
["data-checking-metadata.html", "4 Data Checking: Metadata 4.1 Load relevant R packages 4.2 Tag Metadata 4.3 Searching for false positives", " 4 Data Checking: Metadata Data quality for your projects and the projects of others depends on complete and accurate tag and receiver metadata. Complete metadata will allow detections to be properly linked to your project, and allow other users to benefit fully from data collected by the Motus network of receivers. Once you have imported your data using R, it is therefore good practice to run data summaries to check for missing or incorrect tag and receiver deployment metadata. Missing or incorrect tag metadata can result in a lack of tag detections in your data. For example, if deployment date is missing or wrong, the tag finder, which processes the data from each receiver in the network, might not look for your tag in the data, or might not look at the appropriate time when the tag is actually active. This will result in missing tags in your detections data. Missing or incorrect receiver metadata can result in a loss of information for both your project and the projects of other Motus users. For example, missing deployment latitude and longitude can result in a loss of information on the location of a receiver. Particularly when the same receiver is moved from one location to another, it is important your metadata reflect this, so that you and other users can properly analyze your/their data. Missing antenna deployments, including port number, height and orientation, can also limit what users can do with their data. For example, departure orientation cannot be estimated without the latitude, longitude, orientation, height, antenna type, and port of each antenna. If orientation isn’t something you are interested in, please keep in mind that others with tags detected on your receivers might be. We therefore encourage you to enter all tower and antenna metadata, even if it may not seem relevant to your own project goals. As you run through the following code to check your metadata, please fix metadata errors or omissions in your project by signing in to https://motus.org/, and under the ‘Manage Data’ tab, select either ‘Manage Tags’ to fix tag deployment metadata or ‘Manage Receivers’ to fix receiver deployment metadata. It is important to fix metadata errors online, so that errors are fixed at the source, are archived on the Motus Server, and to ensure all users have access to the correct tag and receiver metadata. 4.1 Load relevant R packages require(devtools) require(tidyverse) 4.2 Tag Metadata 4.2.1 Import Data We will import both the tag metadata, to check which tags are registered to your project, and also the tag detections data, to compare which of the registered tags and present in your detections data. 4.2.1.1 Metadata To import and convert your tag metadata in your .motus file to a flat file: t &lt;- dplyr::src_sqlite(&quot;./data/project-8.motus&quot;) # import .motus file from your local directory (change directory to match) tagMeta &lt;- tbl(t, &quot;tagDeps&quot;) # extract tagDeps table, with tag deployment metadata tagMeta &lt;- tagMeta %&gt;% collect %&gt;% as.data.frame # convert tag metadata to a flat file 4.2.1.2 Detections Data Instructions to access and convert your detections data into a flat file are available in Accessing Data chapter. Here we import the resulting .csv file from a local directory. df &lt;- read.csv(&quot;./data/JB_raw.csv&quot;) 4.2.2 Tag Metadata Checks Only tags registered with Motus (https://motus.org/tag-registration/) prior to deployment will appear in detections data. To view a full list of registered tags in your tag metadata: ## tagID deployID ## 1 17382 1243 ## 2 17383 1244 ## 3 17384 1245 ## 4 17386 1247 ## 5 17387 1248 ## 6 17389 1250 ## 7 17390 1251 ## 8 17391 1252 ## 9 17375 1253 ## 10 17376 1254 ## 11 17367 1255 ## 12 17368 1257 ## 13 17392 1258 ## 14 17369 1259 ## 15 17370 1260 ## 16 17371 1261 ## 17 17372 1262 ## 18 17373 1263 ## 19 17378 1264 ## 20 17374 1266 ## 21 17380 1267 ## 22 17381 1269 ## 23 17394 1270 ## 24 17395 1271 ## 25 17396 1272 ## 26 17398 1274 ## 27 17399 1275 ## 28 10466 1278 ## 29 10467 1279 ## 30 10468 1280 ## 31 10469 1281 ## 32 10470 1282 ## 33 10471 1283 ## 34 10472 1284 ## 35 10473 1285 ## 36 10475 1287 ## 37 10476 1288 ## 38 10477 1289 ## 39 10478 1290 ## 40 10479 1291 ## 41 10480 1292 ## 42 10481 1293 ## 43 10482 1294 ## 44 10483 1295 ## 45 10485 1296 ## 46 10486 1297 ## 47 10487 1298 ## 48 10488 1299 ## 49 10489 1300 ## 50 10490 1301 ## 51 10491 1302 ## 52 10492 1303 ## 53 10493 1304 ## 54 10494 1305 ## 55 10495 1306 ## 56 10496 1307 ## 57 10498 1309 ## 58 10499 1310 ## 59 10500 1311 ## 60 10501 1312 ## 61 10502 1313 ## 62 10503 1314 ## 63 10504 1315 ## 64 10506 1317 ## 65 10465 3608 ## 66 10474 3617 ***** might want to have a list of registered tags from metadata vs. list of tags in data If previously registered tags are missing from your data, please contact motus@birdscanada.org Required tag metadata includes deployment start date/time, end date/time if applicable, deployment latitude, deployment longitude, and species. You can determine which of your tags are missing this metadata as follows: INSERT CODE Please update missing tag metadata online at &lt;www.motus.org&gt; by logging in to your project and selecting the ‘Manage your tags’ option. 4.2.3 Receiver Metadata To obtain detection data from a receiver, it must be registered online to your project by it’s serial number. Receiver deployments are then required to link the appropriate metadata to each detection. To determine a list of receivers registered to your project: INSERT CODE If you are missing any receivers, please register them online through your project management page Each receiver requires a deployment which includes a deployment name, site, station type, deployment start/end dates/times, latitude, longitude, and antenna properties including port number, antenna type, and bearing. To view a full list of your current deployments: INSERT CODE To view which current deployments are missing required information: INSERT CODE Any missing receiver metadata needs to be updated online. If you have updated any metadata online, you’ll need to force an update on the data you have downloaded, it’s good practice to check for updates prior to any analysis as other users may have updated metadata associated with your detection files: t &lt;- tagme(projRecv = 123, forceMeta = TRUE) 4.3 Searching for false positives You may need to check it for false positives, particularely at sites with high levels of background noise, below we outline a number of ways to determine if detections are likely false positives. NOT DONE "],
["cleaning-data-to-remove-false-detections.html", "5 Cleaning data to remove false detections 5.1 Load relevant R packages 5.2 Removing detections outside of deployment range 5.3 Removing detections based on visual geographic positions 5.4 Removing detections based on estimated flight speed 5.5 Removing false positives based on hitID’s 5.6 Removing detections based on automated filtering 5.7 Duplicate tags and ambiguous detections", " 5 Cleaning data to remove false detections Background radio noise will sometimes create false positives in your detection data. Some sites will inherently have more background noise than others, and some tag IDs are more prone to false positives than others. Once you download your data, the first step should be cleaning it of false detections. There are a few ways to do this, ultimately it is up to you to determine which detections are true and which should be removed. Below we outline a number of ways to determine if detections are likely false positives. 5.1 Load relevant R packages library(devtools) library(tidyverse) library(motus) library(lubridate) 5.2 Removing detections outside of deployment range A first step to removing definite false positives, is to remove any detections that fall outside of the tag deployment dates. To do this we will need to import the tagging metadata and merge it with the tag detection files to see tag deployment start/end dates. Download tag deployment metadata: from the download page https://motus.org/data/downloads, select your project from the dropdown menu and click “Tag Deployments” to get a tag-deployments.csv file. Alternatively, you can download the same deployments file from your project tag page. Import tag deployment metadata into R tagMeta &lt;- read.csv(&quot;./data/tag-deployments-jb.csv&quot;) ## replace the location with the file path where you saved the .csv file. ## rename columns tagMeta &lt;- rename(tagMeta, motusTagID = tagID, tagStart = tsStart, tagEnd = tsEnd) OR (we should probably go this way, and work from the .motus file) 1-2. Import tag deployment metadata from your .motus file To import and convert your tag metadata in your .motus file to a flat file (for more information see ‘Accessing Data’ chapter): #t &lt;- dplyr::src_sqlite(&quot;./data/project-38.motus&quot;) # import .motus file from your local directory (change directory to match) #tagMeta &lt;- tbl(t, &quot;tagDeps&quot;) # extract tagDeps table, with tag deployment metadata #tagMeta &lt;- tagMeta %&gt;% collect %&gt;% as.data.frame # convert tag metadata to a flat file Join tag metadata and detection data: Once you’ve created a flat .csv file of your data (see ‘Accessing Data’ Chapter), you can import using the following statement: JBraw &lt;- read.csv(&quot;./data/JB_sample_data_all.csv&quot;) Join the tagMeta database to your detection data, here we only include the start/end date columns from the tagMeta database, however you can choose to keep all columns if necessary. JBraw &lt;- dplyr::left_join(JBraw, select(tagMeta, tagDeployID, motusTagID, tagStart, tagEnd)) Remove detections that fall outside tag deployment dates ## first ensure that all times are in POSIXct JBraw$ts &lt;- as_datetime(JBraw$ts, tz = &quot;UTC&quot;) JBraw$tagStart &lt;- as_datetime(JBraw$tagStart, tz = &quot;UTC&quot;) JBraw$tagEnd &lt;- as_datetime(JBraw$tagEnd, tz = &quot;UTC&quot;) ## subset to keep anything within tag deployment range, making sure to account for NAs in end dates JBraw &lt;- subset(JBraw, ts &lt; tagEnd | is.na(tagEnd)) JBraw &lt;- subset(JBraw, ts &gt; tagStart) 5.3 Removing detections based on visual geographic positions A few simple plots of latitude/longitude vs. time can highlight detections that occur in areas outside of the expected geographic range of the species for that date, or flights showing impossible speeds over large distances. First, lets replace any instances with no GPS coordinates with the given locations from receiver deployment metadata: ## NEED TO ADD SCRIPT ## for now: JBraw &lt;- filter(JBraw, lat &gt; 0) Now, lets make a simple plot ## make lat vs time plots of all tags ## now the data looks better and only tag 16038 looks odd ggplot(JBraw, aes(ts, lat, group = motusTagID)) + geom_point() + geom_line() + facet_wrap(~motusTagID) Tag 16038 looks strange, so we can examine that detection period closer, and then remove any hitIDs we disagree with ## filter JBraw to only show motusTagID 16038, and only before 2015-10-01 ggplot(filter(JBraw, motusTagID == 16038 &amp; ts &lt; as.POSIXct(&quot;2015-10-01&quot;)), aes(ts, lat, group = motusTagID)) + geom_point() + geom_line() + facet_wrap(~motusTagID) It is highly unlikely/implausible that this bird travelled such a distance in one day, especially returning to the same receiver, but to confirm we can examine the signal strength of the potentially false detections. ## this time filter by motusTagID and by latitude so we only see the strange detections ggplot(filter(JBraw, motusTagID == 16038 &amp; lat &lt; 42), aes(ts, sig, colour = as.factor(ant))) + geom_point() + facet_wrap(~motusTagID) It appears that there were only two detections at this receiver, both detections were captured by all 3 antennas, and they were over a minute apart. Since the burst rate of this tag is 6.09 seconds, we know that these are not consecutive detections. These detections are false positives. So lets identify the hitIDs so we can remove them later. ## using a filter that will provide us with only the spurious detections: filter(JBraw, motusTagID == 16038 &amp; lat &lt; 42) ## X hitID runID batchID ts sig freqsd ## 1 3128 239875440 18377606 83952 2015-08-21 02:13:54 -64.8776 0.0183 ## 2 3129 239875441 18377606 83952 2015-08-21 02:15:13 -65.1202 0.0188 ## 3 3130 239875442 18377607 83952 2015-08-21 02:13:54 -55.2240 0.0240 ## 4 3131 239875443 18377607 83952 2015-08-21 02:15:13 -55.2760 0.0121 ## 5 3132 239875444 18377608 83952 2015-08-21 02:13:54 -52.0967 0.0470 ## 6 3133 239875445 18377608 83952 2015-08-21 02:15:13 -51.6143 0.0127 ## motusTagID ant runLen tagProjID id tagDeployID depLat depLon ## 1 16038 1 2 38 180 1826 51.4839 -80.45 ## 2 16038 1 2 38 180 1826 51.4839 -80.45 ## 3 16038 2 2 38 180 1826 51.4839 -80.45 ## 4 16038 2 2 38 180 1826 51.4839 -80.45 ## 5 16038 3 2 38 180 1826 51.4839 -80.45 ## 6 16038 3 2 38 180 1826 51.4839 -80.45 ## recvDeployID recv site projID antType ## 1 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 2 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 3 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 4 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 5 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 6 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## antBearing spEN tagProj proj lat lon alt ## 1 110 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 2 110 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 3 85 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 4 85 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 5 230 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 6 230 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## tagStart tagEnd ## 1 2015-08-17 10:30:00 &lt;NA&gt; ## 2 2015-08-17 10:30:00 &lt;NA&gt; ## 3 2015-08-17 10:30:00 &lt;NA&gt; ## 4 2015-08-17 10:30:00 &lt;NA&gt; ## 5 2015-08-17 10:30:00 &lt;NA&gt; ## 6 2015-08-17 10:30:00 &lt;NA&gt; We can see that the hitIDs we want to remove are 239875440 - 239875445. For now we will keep them in the data to continue looking for false positives. We will remove all of them together at the end of this chapter. 5.4 Removing detections based on estimated flight speed By looking at the rate of movement between sites with consicutive detections, we can quickly view flights that are not physically possible. Further examination of these detections will be required to determine which detections are true and which are false. Rate of movement between sites can be determined using the siteTrans function in the motus R package. For instructions on installing the package, see chapter “Loading Packages”. JBtrans &lt;- siteTrans(JBraw) ## create new data.base consisting of transitions between consecutive sites for each tag head(JBtrans) ## # A tibble: 6 x 15 ## # Groups: motusTagID, tagDeployID [1] ## motusTagID tagDeployID ts.x lat.x lon.x ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 16037 1825 2015-08-17 17:02:39 51.4793 -80.4337 ## 2 16037 1825 2015-08-28 16:40:18 51.4839 -80.4501 ## 3 16037 1825 2015-09-08 01:10:13 51.2913 -80.1168 ## 4 16037 1825 2015-09-08 18:37:16 44.5809 -65.7928 ## 5 16037 1825 2015-09-13 19:46:27 39.0283 -74.8100 ## 6 16037 1825 2015-09-14 15:56:49 37.1499 -75.9572 ## # ... with 10 more variables: site.x &lt;fctr&gt;, ts.y &lt;dttm&gt;, lat.y &lt;dbl&gt;, ## # lon.y &lt;dbl&gt;, site.y &lt;fctr&gt;, tot_ts &lt;time&gt;, dist &lt;dbl&gt;, rate &lt;dbl&gt;, ## # bearing &lt;dbl&gt;, rhumbline_bearing &lt;dbl&gt; ## so we see that tag 16047 has lots of high speeds due to close towers - 16038 has high speeds due to false detections ## same as what we saw with the plots, so lets remove those hitIDs tmp &lt;- filter(JBraw, !(hitID %in% c(239875440, 239875441, 239875442, 239875443, 239875444, 239875445))) The resulting database JBtrans shows information on the last detection at site x, and the first detection at site y. So in the above table, we can see the total time, distance, rate of movement, bearing, and rhumbline_bearing of potential flights between sites. Rate of movement is presented as m/s. Because rate of movement is based on receiver location at the time of last and first detection at two sites, it is only an estimation and sites closer together will have less accurate results. For example, lets look at row 58 from JBtrans: JBtrans[58,] ## # A tibble: 1 x 15 ## # Groups: motusTagID, tagDeployID [1] ## motusTagID tagDeployID ts.x lat.x lon.x site.x ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fctr&gt; ## 1 16047 1839 2015-10-26 11:27:54 42.488 -72.5376 MountToby ## # ... with 9 more variables: ts.y &lt;dttm&gt;, lat.y &lt;dbl&gt;, lon.y &lt;dbl&gt;, ## # site.y &lt;fctr&gt;, tot_ts &lt;time&gt;, dist &lt;dbl&gt;, rate &lt;dbl&gt;, bearing &lt;dbl&gt;, ## # rhumbline_bearing &lt;dbl&gt; It would appear that the bird is travelling at a rage of 2203.543 m/s (7,932 km/hr)! Based on rate alone you may think this is due to false detections, however the two sites are only 22km apart, and the time between detections was only 10 seconds. This high estimated rate of movement is likely due to the tag being detected at the edge of the detection range of both receivers; remember we do not know how far the tag is from the receiver location at time of detection. It’s therefore important to take all information into consideration when looking at high rates of movement. Let’s look at all cases of high rates of movements, we can be conservative and only look at rates &gt; 50 m/s filter(JBtrans, rate &gt; 50) ## # A tibble: 23 x 15 ## # Groups: motusTagID, tagDeployID [2] ## motusTagID tagDeployID ts.x lat.x lon.x ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 16038 1826 2015-08-20 22:51:11 51.4839 -80.4501 ## 2 16047 1839 2015-10-26 11:19:40 42.6807 -72.4739 ## 3 16047 1839 2015-10-26 11:19:49 42.6070 -72.7166 ## 4 16047 1839 2015-10-26 11:19:59 42.6807 -72.4739 ## 5 16047 1839 2015-10-26 11:20:28 42.6070 -72.7166 ## 6 16047 1839 2015-10-26 11:20:48 42.6807 -72.4739 ## 7 16047 1839 2015-10-26 11:21:17 42.6070 -72.7166 ## 8 16047 1839 2015-10-26 11:21:46 42.6807 -72.4739 ## 9 16047 1839 2015-10-26 11:21:55 42.6070 -72.7166 ## 10 16047 1839 2015-10-26 11:22:34 42.6807 -72.4739 ## # ... with 13 more rows, and 10 more variables: site.x &lt;fctr&gt;, ## # ts.y &lt;dttm&gt;, lat.y &lt;dbl&gt;, lon.y &lt;dbl&gt;, site.y &lt;fctr&gt;, tot_ts &lt;time&gt;, ## # dist &lt;dbl&gt;, rate &lt;dbl&gt;, bearing &lt;dbl&gt;, rhumbline_bearing &lt;dbl&gt; Almost all of these flights are between stations that are &lt; 30 km apart so high rates of movement are not surprising. Only one flight had an impossible rate of movement with stations far apart: filter(JBtrans, rate &gt; 50 &amp; dist &gt; 40000) ## # A tibble: 1 x 15 ## # Groups: motusTagID, tagDeployID [1] ## motusTagID tagDeployID ts.x lat.x lon.x site.x ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fctr&gt; ## 1 16038 1826 2015-08-20 22:51:11 51.4839 -80.4501 North Bluff ## # ... with 9 more variables: ts.y &lt;dttm&gt;, lat.y &lt;dbl&gt;, lon.y &lt;dbl&gt;, ## # site.y &lt;fctr&gt;, tot_ts &lt;time&gt;, dist &lt;dbl&gt;, rate &lt;dbl&gt;, bearing &lt;dbl&gt;, ## # rhumbline_bearing &lt;dbl&gt; Not surprisingly, this is the same tag we identified as having false positives when examining latitudinal plots above. We can confirm the hitID’s by making the same plots as above, or similar ones identifying site name: ggplot(filter(JBraw, motusTagID == 16038), aes(ts, lat, col = as.factor(site))) + geom_point() We can see that the detections at Illini State Park are the spurious detections, so to determine their hitIDs we can filter by site: filter(JBraw, motusTagID == 16038 &amp; site == &quot;Illini State Park &quot;) ## X hitID runID batchID ts sig freqsd ## 1 3128 239875440 18377606 83952 2015-08-21 02:13:54 -64.8776 0.0183 ## 2 3129 239875441 18377606 83952 2015-08-21 02:15:13 -65.1202 0.0188 ## 3 3130 239875442 18377607 83952 2015-08-21 02:13:54 -55.2240 0.0240 ## 4 3131 239875443 18377607 83952 2015-08-21 02:15:13 -55.2760 0.0121 ## 5 3132 239875444 18377608 83952 2015-08-21 02:13:54 -52.0967 0.0470 ## 6 3133 239875445 18377608 83952 2015-08-21 02:15:13 -51.6143 0.0127 ## motusTagID ant runLen tagProjID id tagDeployID depLat depLon ## 1 16038 1 2 38 180 1826 51.4839 -80.45 ## 2 16038 1 2 38 180 1826 51.4839 -80.45 ## 3 16038 2 2 38 180 1826 51.4839 -80.45 ## 4 16038 2 2 38 180 1826 51.4839 -80.45 ## 5 16038 3 2 38 180 1826 51.4839 -80.45 ## 6 16038 3 2 38 180 1826 51.4839 -80.45 ## recvDeployID recv site projID antType ## 1 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 2 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 3 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 4 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 5 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## 6 2566 SG-1215BBBK1163 Illini State Park 80 yagi-5 ## antBearing spEN tagProj proj lat lon alt ## 1 110 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 2 110 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 3 85 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 4 85 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 5 230 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## 6 230 Semipalmated Sandpiper JamesBay Shoener 41.3272 -88.74 156.8 ## tagStart tagEnd ## 1 2015-08-17 10:30:00 &lt;NA&gt; ## 2 2015-08-17 10:30:00 &lt;NA&gt; ## 3 2015-08-17 10:30:00 &lt;NA&gt; ## 4 2015-08-17 10:30:00 &lt;NA&gt; ## 5 2015-08-17 10:30:00 &lt;NA&gt; ## 6 2015-08-17 10:30:00 &lt;NA&gt; Once again we determine that we should remove hitID’s 239875440 - 239875445. 5.5 Removing false positives based on hitID’s Now that we have a list of hitID’s that we have determined to be false positives, we can easily remove them from our database JBfiltered &lt;- filter(JBraw, !(hitID %in% c(239875440, 239875441, 239875442, 239875443, 239875444, 239875445))) 5.6 Removing detections based on automated filtering You can also remove spurious detections through some simple automated filters if you do not wish to examine each tag individually. But note that by applying a general filter to all your detections, you risk removing true detections as well. Detections can be filtered by freqsd or by runLen. freqsd refers to the standard deviation of frequency offset among pulses in a burst, in kHz. Values larger than 0.1 kHz suggest a bogus detection, however this is for detections on SensorGnomes only. runLen is the number of tag bursts in the current run, a run is defined as a group of consecutive detections of a tag detected on a receiver. If you decide to run these filters on your data, it is recommended that you identify the detections you would be removing and examine them to ensure you aren’t removing an unwanted amount of true detections. ## first convert freqsd to NA for all Lotek receivers JBraw$freqsd &lt;- ifelse(grepl(&quot;Lotek&quot;, JBraw$recv), &quot;NA&quot;,JBraw$freqsd) ## identify which detections would be removed by creating a new column &quot;filter&quot; JBraw$filter &lt;- &quot;KEEP&quot; JBraw$filter[JBraw$runLen &lt;= 2 &amp; JBraw$freqsd &gt;= 0.1] &lt;- &quot;FILTER&quot; Based on these filters, we can summarize how many detections would be removed based on tag, site, or receiver type: ## potential detections to filter by site table(JBraw$filter, JBraw$site) ## ## Assateague State Park BennettMeadow BISE Blandford Bombay Hook ## FILTER 0 0 4 0 0 ## KEEP 6 27 40 2 121 ## ## Brier2 BULL Comeau (Marshalltown) D&#39;Estimauville FINWR ## FILTER 0 0 0 1 0 ## KEEP 41 69 6 73 148 ## ## Flamborough_Quarry FortRiver GWASS Hillman_Marsh Hogback ## FILTER 4 0 0 2 18 ## KEEP 0 0 5 0 41 ## ## Illini State Park Kamouraska Koffler Longridge LOOKSPT Machias ## FILTER 0 0 1 0 0 0 ## KEEP 6 0 1 158 110 0 ## ## Mount Thom MountToby Netitishi North Bluff NP mobile NWW Old Cut ## FILTER 0 2 0 3 0 4 12 ## KEEP 0 6 2145 681 32 0 6 ## ## Piskwamish Port Maitland Prime Hook Ruby&#39;s Sable West Light 2 ## FILTER 0 0 0 0 28 ## KEEP 224 42 82 0 25 ## ## SBWL1 Shelburne Southwest Head St Denis Sur Mer Swallowtail TRUS ## FILTER 10 0 0 0 1 4 ## KEEP 4 5 65 0 25 8 Sable West Light 2, and Hogback seem to have relatively higher numbers of spurious detections, note that it didn’t filter out the false positives at Illini State Park ## potential detections to filter by motusTagID table(JBraw$filter, JBraw$motusTagID) ## ## 16035 16036 16037 16038 16039 16044 16047 16048 ## FILTER 0 0 10 40 10 2 31 1 ## KEEP 456 118 1342 122 1116 303 760 97 motusTagID 16038 seems to have a higher number of spurious detections From here it is a judgement call whether to filter based on freqsd or runLen, and how strict to make the filters. You may wish to apply them only to certain sites or certain tag IDs. There is a balance between removing all questionable detections along with some true detections, vs keeping all detections and potentially having some false positives. To filter based on the above criteria: JBraw &lt;- filter(JBraw, filter == &quot;KEEP&quot;) Ultimately, how strictly you filter your detection data is up to each individual, but it is well worth your time to work through some or all of these methods to be confident in the accuracy of your detection data. 5.7 Duplicate tags and ambiguous detections Duplicate tags occur when there are two or more tags with the same Lotek ID code, burst interval, and nominal transmit frequency (i.e., tags are indistinguishable). The tag finder program only looks for tags in the raw detetions data during their active lifetimes. Tag lifetimes are estimated based on tag metadata, including deployment date, tag model (battery size), and burst interval. If duplicate tags do not overlap in their active lifetimes, there is no ambiguity in terms of which project and tag the detections belongs to, and each detection is assigned unambiguously to the correct project and tag. This is by far the most common situation for duplicate tags in the Motus system. In the rare situation when duplicate tags are deployed with overlapping lifetimes, this can result in ambiguous tag detections, where more than one tag (up to 6) could be the source of those detections. In your detections data, these ambiguous detections are identified by a unique negative value in the ‘motusTagID’. 5.7.1 Check for ambiguous tags First, make a list of motusTagIDs in your detections data. If your motusTagIDs are all &gt; 0, then you don’t have ambiguous detections in your data. select(df.flat, motusTagID) %&gt;% distinct() %&gt;% arrange(motusTagID) ## motusTagID ## 1 10465 ## 2 10466 ## 3 10467 ## 4 10468 ## 5 10469 ## 6 10470 ## 7 10471 ## 8 10472 ## 9 10473 ## 10 10474 ## 11 10475 ## 12 10476 ## 13 10477 ## 14 10478 ## 15 10479 ## 16 10480 ## 17 10481 ## 18 10482 ## 19 10483 ## 20 10485 ## 21 10486 ## 22 10487 ## 23 10488 ## 24 10489 ## 25 10490 ## 26 10491 ## 27 10492 ## 28 10493 ## 29 10494 ## 30 10495 ## 31 10496 ## 32 10498 ## 33 10499 ## 34 10500 ## 35 10501 ## 36 10502 ## 37 10503 ## 38 10504 ## 39 10506 ## 40 17367 ## 41 17368 ## 42 17369 ## 43 17370 ## 44 17371 ## 45 17372 ## 46 17373 ## 47 17374 ## 48 17375 ## 49 17376 ## 50 17378 ## 51 17380 ## 52 17381 ## 53 17382 ## 54 17383 ## 55 17384 ## 56 17386 ## 57 17387 ## 58 17389 ## 59 17390 ## 60 17391 ## 61 17392 ## 62 17394 ## 63 17395 ## 64 17396 ## 65 17398 ## 66 17399 In this case, there are several ambiguities in the data. "],
["exploring-data-with-the-motus-r-package.html", "6 Exploring data with the Motus R package 6.1 Summarizing your data 6.2 Plotting your data", " 6 Exploring data with the Motus R package There are a number of functions within the Motus package that will allow you to quickly explore your data. This section provides examples of how you can use these functions through summaries and visualizations. 6.1 Summarizing your data 6.2 Plotting your data "]
]
