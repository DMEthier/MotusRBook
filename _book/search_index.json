[
["index.html", "R for Motus A walk through the use of R to analyze Motus automated radio-telemetry data", " R for Motus Tara L. Crewe, Zoe Crysler, ? A walk through the use of R to analyze Motus automated radio-telemetry data Our goal with this online ‘handbook’ is to show Motus (&lt;www.motus.org&gt;) users how to use the Motus R package (https://github.com/jbrzusto/motus), along with other stand-alone R packages (e.g., ggplot2), to import tag detection data for their project or receiver; explore their data through visualizations and summaries; transform their data, e.g., by determining time since sunrise/sunset or magnetic declination; and to analyze Motus detections data. "],
["introduction.html", "1 Introduction 1.1 What this book does not cover 1.2 Prerequisites 1.3 How this book is organized 1.4 Acknowledgements", " 1 Introduction knitr::include_graphics(&quot;F:/Motus/Motus_RPackage/pics/Motus-System-IG-final.png&quot;) The Motus Wildlife Tracking System (‘Motus’; Taylor et al. 2017; https://www.motus.org) is an international, collaborative automated radio-telemetry network that is used to track the movement and behaviour of primarily small flying organisms affixed with digitally encoded radio-transmitters. Motus has its roots in the SensorGnome network piloted in 2012-2013. In 2014, a major infrastructure expansion was made possible through a Canada Foundation for Innovation grant to Western University, The University of Guelph, and Acadia University. Since then, Motus has continued to grow through the collaboration of independent researchers and organizations https://motus.org/about/, and is now managed as a program of Bird Studies Canada (https://www.birdscanada.org) in partnership with Acadia University. Motus is unique among automated telemetry arrays in that all researchers in a geographic region (e.g., the Americas or Europe) use a shared radio frequency. This allows tagged animals to be detected by any receiving station across the network, greatly broadening the spatial scope of potential research questions. Motus users also use a shared data infrastructure and web portal: all data collected from across the network are centrally stored and archived, which allows users to access detections of their tags by anyone’s receiver in the network, and individuals that maintain receivers have access to all detections of anyone’s tags on those receivers. Having a shared data infrastructure also means that users can benefit from R functions written specifically for Motus data by any and all users. A Motus R package is in continual development, and the intent of this online ‘handbook’ is to help users learn how the various functionalities of the package, and additional R packages like ggplot, can be used to retrieve tag detections, explore, visualize, transform, and analyze Motus data. The content of the handbook will continue to evolve and grow along with the analytical needs of the network. Those interested in contributing code to the Motus R package or this handbook can send proposed additions to Tara Crewe (tcrewe@birdscanada.org) or Zoe Crysler (zcrysler@birdscanada.org) (??). Taylor, P. D., T. L. Crewe, S. A. Mackenzie, D. Lepage, Y. Aubry, Z. Crysler, G. Finney, C. M. Francis, C. G. Guglielmo, D. J. Hamilton, R. L. Holberton, P. H. Loring, G. W. Mitchell, D. R. Noriis, J. Paquet, R. A. Ronconi, J. Smetzer, P. A. Smith, L. J. Welch, and B. K. Woodworth. 2017. The Motus Wildlife Tracking System: a collaborative research network to enhance the understanding of wildlife movement. Avian Conservation and Ecology 12(1):8. https://doi.org/10.5751/ACE-00953-120108. 1.1 What this book does not cover This book does not currently cover how to register radio tags with Motus, manage tags and station deployments, upload data, and so on. Information to guide you through those tasks can be found under the ‘resources’ tab on the Motus website at https://motus.org/resources/. Please remember to register your tags and enter tag and station metadata with Motus prior to deploying your tags. Please also see https://motus.org/policy/ to review our collaboration policy and tag registration and fee schedule. 1.2 Prerequisites This book assumes that you have a basic understanding of R. If you are new to R, we highly recommend ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham (http://r4ds.had.co.nz/), which covers how to import, visualize, and summarize data in R using the Tidyverse collection of R packages https://www.tidyverse.org/. It also provides useful tips for organizing your workflow to create clean, reproducible code (http://r4ds.had.co.nz/workflow-projects.html). We follow their lead by using Tidyverse throughout this book, and where possible within the package functions. 1.3 How this book is organized Each section of this book will begin with a paragraph or figure describing the broader intention or outcome of the section, followed by details on how to get there using R. For example, the section on accessing and downloading tag detection data begins with a screenshot of the structure of a dataframe, followed by the R code required to access the data. 1.4 Acknowledgements Motus was conceived as the SensorGnome network by Philip Taylor and John Brzustowski at Acadia University. Initial expansion of the network was supported by a Canada Foundation for Innovation Grant to Western University (Christopher Guglielmo), The University of Guelph (D. Ryan Norris), and Acadia University (Philip Taylor). The development of the Motus web interface, R package, and accompanying handbook were made possible through a Canarie grant to Bird Studies Canada (https://www.canarie.ca/). Motus continues to grow as a program of Bird Studies Canada, through the collaboration of numerous independent researchers, organizations, and individuals. A non-exhaustive list of Motus partners and collaborators can be found at https://motus.org/data/partners.jsp. If your organization is not listed, please contact motus@birdscanada.org. Many people have worked together to bring Motus technology, the web interface, and R-package together. The core ‘Motus Team’ includes John Brzustowski, Zoe Crysler, Tara Crewe, Jeremy Hussell, Catherine Jardine, Denis Lepage, Stuart Mackenzie, Paul Morrill, and Philip Taylor. "],
["loading-the-motus-r-package.html", "2 Loading the Motus R Package 2.1 User Authentication 2.2 Internal data processing", " 2 Loading the Motus R Package Motus users can install the latest stable version of the Motus R package by: install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this install_github(&quot;jbrzusto/motus@master&quot;) ## the last stable version For developers, the ‘staging’ branch is for work-in-progress. Install it with: install.packages(&quot;devtools&quot;) ## if you haven&#39;t already done this install_github(&quot;jbrzusto/motus@staging&quot;) ## the development version Throughout the book, we use Tidyverse https://www.tidyverse.org/, which is a collection of R packages, including tidyr() and dplyr(). These can be installed with: install.packages(&quot;tidyverse&quot;) More information on Tidyverse can be found at https://www.tidyverse.org/, or by browsing ‘R for Data Science’ by Garrett Grolemund and Hadley Wickham: http://r4ds.had.co.nz/. 2.1 User Authentication knitr::include_graphics(&quot;F:/Motus/Motus_RPackage/pics/MotusLogo.png&quot;) The first time you call a function using the Motus R package, you will be asked for your motus.org username and password to authenticate your access to the data. This will only happen once per R session. 2.2 Internal data processing As an animal moves within the detection range of a Motus station, radio transmissions, or ‘bursts’, are detected by antenna(s) and recorded by a receiver. These raw detection data are either uploaded to the Motus database instantaneously via internet connection, or downloaded from the receiver and uploaded to Motus manually. Behind the scenes, various functions read and process the raw detections data to produce the tag detections file that users access using the R package (see ‘Data Import’ below). While most users will not need to call on the internal data processing functions, a complete list of functions within the R package can be found on GitHub: https://github.com/jbrzusto/motus. The code behind each function can be viewed on GitHub, or by typing: function.name() in the R console after loading the Motus R package (you would replace ‘function.name’ with the name of the R function of interest). "],
["accessing-and-understanding-detections-data.html", "3 Accessing and understanding detections data 3.1 Data structure 3.2 Importing tag detections", " 3 Accessing and understanding detections data 3.1 Data structure knitr::include_graphics(&quot;F:/Motus/Motus_RPackage/pics/DataStructure.png&quot;) There are two types of tag database: receiver database: all detections of any tags from a single receiver. A receiver database has a name like SG-1234BBBK5678.motus; where the name is the serial number of the receiver. project database: all detections of your tags from across the motus network A tag project database has a name like project-123.motus, where the number is the motus project ID. These two databases correspond to the basic model of data sharing: you get all detections of anyone’s tags by your receivers (i.e., one receiver tag database for each receiver you deploy) you get all detections of your tags by anyone’s receivers (i.e., one project tag database for each of your motus projects) The following table lists the parameters downloaded with the project and receiver tag databases, along with a description of each parameter. param.table &lt;- read.csv(&quot;./data/DatabaseParameters.csv&quot;) library(knitr) kable(param.table, caption = &quot;&quot;) 3.2 Importing tag detections To import tag detections for your project or receiver, you need a numerical project id or character scalar receiver serial number. 3.2.1 Download data for a project or receiver for the first time When downloading data for the first time, you must specify update = TRUE and new = TRUE. Unless the directory is stated explicitly within the function call, data will be downloaded to the current working directory: getwd() # to see what the current working directory is. # use setwd() if you want to change the working directory. t &lt;- tagme(projRecv = 123, update = TRUE, new = TRUE) # for project tag database OR: t &lt;- tagme(projRecv = &quot;SG-1234BBBK4567&quot;, update = TRUE, new = TRUE) # for receiver tag database Or specify a directory to create and open a local tag database using “dir =”: t &lt;- tagme(projRecv = 123, update = TRUE, new = TRUE, dir = &quot;C:/Data/&quot;) 3.2.2 Open a local tag database To open a database that already exists (has been downloaded previously): t &lt;- tagme(projRecv = 123) ## if the file is in the local working directory, OR: t &lt;- tagme(projRecv = 123, dir = &quot;C:/Data/&quot;) ## use dir = to specify a directory 3.2.3 Update and open a local tag database To download any new data for a project or receiver that has already been downloaded to a local file in the current directory: t &lt;- tagme(projRecv = 123) 3.2.4 Check if new data are available To check if new data are available without downloading the new data, you can add the countOnly parameter, which will provide a count of items that would need to be transferred to update the database. This assumes that a local copy of the database already exists: n &lt;- tagme(projRecv = 123, countOnly = TRUE) 3.2.5 Force an update/re-import of metadata Tag and receiver metadata are automatically merged with tag detections when data are downloaded. However, if you want to force a re-import of the metadata when updating a database, you can run: df &lt;- tagme(projRecv = 123, forceMeta = TRUE) "]
]
